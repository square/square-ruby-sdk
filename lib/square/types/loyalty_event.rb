# frozen_string_literal: true
require_relative "loyalty_event_type"
require_relative "loyalty_event_accumulate_points"
require_relative "loyalty_event_create_reward"
require_relative "loyalty_event_redeem_reward"
require_relative "loyalty_event_delete_reward"
require_relative "loyalty_event_adjust_points"
require_relative "loyalty_event_source"
require_relative "loyalty_event_expire_points"
require_relative "loyalty_event_other"
require_relative "loyalty_event_accumulate_promotion_points"
require "ostruct"
require "json"

module SquareApiClient
# Provides information about a loyalty event.
#  For more information, see [Search for Balance-Changing Loyalty
#  Events](https://developer.squareup.com/docs/loyalty-api/loyalty-events).
  class LoyaltyEvent
  # @return [String] The Square-assigned ID of the loyalty event.
    attr_reader :id
  # @return [SquareApiClient::LoyaltyEventType] The type of the loyalty event.
#  See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
    attr_reader :type
  # @return [String] The timestamp when the event was created, in RFC 3339 format.
    attr_reader :created_at
  # @return [SquareApiClient::LoyaltyEventAccumulatePoints] Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
    attr_reader :accumulate_points
  # @return [SquareApiClient::LoyaltyEventCreateReward] Provides metadata when the event `type` is `CREATE_REWARD`.
    attr_reader :create_reward
  # @return [SquareApiClient::LoyaltyEventRedeemReward] Provides metadata when the event `type` is `REDEEM_REWARD`.
    attr_reader :redeem_reward
  # @return [SquareApiClient::LoyaltyEventDeleteReward] Provides metadata when the event `type` is `DELETE_REWARD`.
    attr_reader :delete_reward
  # @return [SquareApiClient::LoyaltyEventAdjustPoints] Provides metadata when the event `type` is `ADJUST_POINTS`.
    attr_reader :adjust_points
  # @return [String] The ID of the [loyalty account](entity:LoyaltyAccount) associated with the
#  event.
    attr_reader :loyalty_account_id
  # @return [String] The ID of the [location](entity:Location) where the event occurred.
    attr_reader :location_id
  # @return [SquareApiClient::LoyaltyEventSource] Defines whether the event was generated by the Square Point of Sale.
#  See [LoyaltyEventSource](#type-loyaltyeventsource) for possible values
    attr_reader :source
  # @return [SquareApiClient::LoyaltyEventExpirePoints] Provides metadata when the event `type` is `EXPIRE_POINTS`.
    attr_reader :expire_points
  # @return [SquareApiClient::LoyaltyEventOther] Provides metadata when the event `type` is `OTHER`.
    attr_reader :other_event
  # @return [SquareApiClient::LoyaltyEventAccumulatePromotionPoints] Provides metadata when the event `type` is `ACCUMULATE_PROMOTION_POINTS`.
    attr_reader :accumulate_promotion_points
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] The Square-assigned ID of the loyalty event.
    # @param type [SquareApiClient::LoyaltyEventType] The type of the loyalty event.
#  See [LoyaltyEventType](#type-loyaltyeventtype) for possible values
    # @param created_at [String] The timestamp when the event was created, in RFC 3339 format.
    # @param accumulate_points [SquareApiClient::LoyaltyEventAccumulatePoints] Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
    # @param create_reward [SquareApiClient::LoyaltyEventCreateReward] Provides metadata when the event `type` is `CREATE_REWARD`.
    # @param redeem_reward [SquareApiClient::LoyaltyEventRedeemReward] Provides metadata when the event `type` is `REDEEM_REWARD`.
    # @param delete_reward [SquareApiClient::LoyaltyEventDeleteReward] Provides metadata when the event `type` is `DELETE_REWARD`.
    # @param adjust_points [SquareApiClient::LoyaltyEventAdjustPoints] Provides metadata when the event `type` is `ADJUST_POINTS`.
    # @param loyalty_account_id [String] The ID of the [loyalty account](entity:LoyaltyAccount) associated with the
#  event.
    # @param location_id [String] The ID of the [location](entity:Location) where the event occurred.
    # @param source [SquareApiClient::LoyaltyEventSource] Defines whether the event was generated by the Square Point of Sale.
#  See [LoyaltyEventSource](#type-loyaltyeventsource) for possible values
    # @param expire_points [SquareApiClient::LoyaltyEventExpirePoints] Provides metadata when the event `type` is `EXPIRE_POINTS`.
    # @param other_event [SquareApiClient::LoyaltyEventOther] Provides metadata when the event `type` is `OTHER`.
    # @param accumulate_promotion_points [SquareApiClient::LoyaltyEventAccumulatePromotionPoints] Provides metadata when the event `type` is `ACCUMULATE_PROMOTION_POINTS`.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::LoyaltyEvent]
    def initialize(id: OMIT, type:, created_at: OMIT, accumulate_points: OMIT, create_reward: OMIT, redeem_reward: OMIT, delete_reward: OMIT, adjust_points: OMIT, loyalty_account_id: OMIT, location_id: OMIT, source:, expire_points: OMIT, other_event: OMIT, accumulate_promotion_points: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @type = type
      @created_at = created_at if created_at != OMIT
      @accumulate_points = accumulate_points if accumulate_points != OMIT
      @create_reward = create_reward if create_reward != OMIT
      @redeem_reward = redeem_reward if redeem_reward != OMIT
      @delete_reward = delete_reward if delete_reward != OMIT
      @adjust_points = adjust_points if adjust_points != OMIT
      @loyalty_account_id = loyalty_account_id if loyalty_account_id != OMIT
      @location_id = location_id if location_id != OMIT
      @source = source
      @expire_points = expire_points if expire_points != OMIT
      @other_event = other_event if other_event != OMIT
      @accumulate_promotion_points = accumulate_promotion_points if accumulate_promotion_points != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "type": type, "created_at": created_at, "accumulate_points": accumulate_points, "create_reward": create_reward, "redeem_reward": redeem_reward, "delete_reward": delete_reward, "adjust_points": adjust_points, "loyalty_account_id": loyalty_account_id, "location_id": location_id, "source": source, "expire_points": expire_points, "other_event": other_event, "accumulate_promotion_points": accumulate_promotion_points }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of LoyaltyEvent
    #
    # @param json_object [String] 
    # @return [SquareApiClient::LoyaltyEvent]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      type = parsed_json["type"]
      created_at = parsed_json["created_at"]
      unless parsed_json["accumulate_points"].nil?
        accumulate_points = parsed_json["accumulate_points"].to_json
        accumulate_points = SquareApiClient::LoyaltyEventAccumulatePoints.from_json(json_object: accumulate_points)
      else
        accumulate_points = nil
      end
      unless parsed_json["create_reward"].nil?
        create_reward = parsed_json["create_reward"].to_json
        create_reward = SquareApiClient::LoyaltyEventCreateReward.from_json(json_object: create_reward)
      else
        create_reward = nil
      end
      unless parsed_json["redeem_reward"].nil?
        redeem_reward = parsed_json["redeem_reward"].to_json
        redeem_reward = SquareApiClient::LoyaltyEventRedeemReward.from_json(json_object: redeem_reward)
      else
        redeem_reward = nil
      end
      unless parsed_json["delete_reward"].nil?
        delete_reward = parsed_json["delete_reward"].to_json
        delete_reward = SquareApiClient::LoyaltyEventDeleteReward.from_json(json_object: delete_reward)
      else
        delete_reward = nil
      end
      unless parsed_json["adjust_points"].nil?
        adjust_points = parsed_json["adjust_points"].to_json
        adjust_points = SquareApiClient::LoyaltyEventAdjustPoints.from_json(json_object: adjust_points)
      else
        adjust_points = nil
      end
      loyalty_account_id = parsed_json["loyalty_account_id"]
      location_id = parsed_json["location_id"]
      source = parsed_json["source"]
      unless parsed_json["expire_points"].nil?
        expire_points = parsed_json["expire_points"].to_json
        expire_points = SquareApiClient::LoyaltyEventExpirePoints.from_json(json_object: expire_points)
      else
        expire_points = nil
      end
      unless parsed_json["other_event"].nil?
        other_event = parsed_json["other_event"].to_json
        other_event = SquareApiClient::LoyaltyEventOther.from_json(json_object: other_event)
      else
        other_event = nil
      end
      unless parsed_json["accumulate_promotion_points"].nil?
        accumulate_promotion_points = parsed_json["accumulate_promotion_points"].to_json
        accumulate_promotion_points = SquareApiClient::LoyaltyEventAccumulatePromotionPoints.from_json(json_object: accumulate_promotion_points)
      else
        accumulate_promotion_points = nil
      end
      new(
        id: id,
        type: type,
        created_at: created_at,
        accumulate_points: accumulate_points,
        create_reward: create_reward,
        redeem_reward: redeem_reward,
        delete_reward: delete_reward,
        adjust_points: adjust_points,
        loyalty_account_id: loyalty_account_id,
        location_id: location_id,
        source: source,
        expire_points: expire_points,
        other_event: other_event,
        accumulate_promotion_points: accumulate_promotion_points,
        additional_properties: struct
      )
    end
# Serialize an instance of LoyaltyEvent to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.type.is_a?(SquareApiClient::LoyaltyEventType) != false || raise("Passed value for field obj.type is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.accumulate_points.nil? || SquareApiClient::LoyaltyEventAccumulatePoints.validate_raw(obj: obj.accumulate_points)
      obj.create_reward.nil? || SquareApiClient::LoyaltyEventCreateReward.validate_raw(obj: obj.create_reward)
      obj.redeem_reward.nil? || SquareApiClient::LoyaltyEventRedeemReward.validate_raw(obj: obj.redeem_reward)
      obj.delete_reward.nil? || SquareApiClient::LoyaltyEventDeleteReward.validate_raw(obj: obj.delete_reward)
      obj.adjust_points.nil? || SquareApiClient::LoyaltyEventAdjustPoints.validate_raw(obj: obj.adjust_points)
      obj.loyalty_account_id&.is_a?(String) != false || raise("Passed value for field obj.loyalty_account_id is not the expected type, validation failed.")
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
      obj.source.is_a?(SquareApiClient::LoyaltyEventSource) != false || raise("Passed value for field obj.source is not the expected type, validation failed.")
      obj.expire_points.nil? || SquareApiClient::LoyaltyEventExpirePoints.validate_raw(obj: obj.expire_points)
      obj.other_event.nil? || SquareApiClient::LoyaltyEventOther.validate_raw(obj: obj.other_event)
      obj.accumulate_promotion_points.nil? || SquareApiClient::LoyaltyEventAccumulatePromotionPoints.validate_raw(obj: obj.accumulate_promotion_points)
    end
  end
end