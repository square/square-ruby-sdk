# frozen_string_literal: true
require_relative "inventory_state"
require "ostruct"
require "json"

module square.rb
  class InventoryAdjustmentGroup
  # @return [String] A unique ID generated by Square for the
#  `InventoryAdjustmentGroup`.
    attr_reader :id
  # @return [String] The inventory adjustment of the composed variation.
    attr_reader :root_adjustment_id
  # @return [square.rb::InventoryState] Representative `from_state` for adjustments within the group. For example, for a
#  group adjustment from `IN_STOCK` to `SOLD`,
#  there can be two component adjustments in the group: one from `IN_STOCK`to
#  `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
#  Here, the representative `from_state` for the `InventoryAdjustmentGroup` is
#  `IN_STOCK`.
#  See [InventoryState](#type-inventorystate) for possible values
    attr_reader :from_state
  # @return [square.rb::InventoryState] Representative `to_state` for adjustments within group. For example, for a group
#  adjustment from `IN_STOCK` to `SOLD`,
#  the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED`
#  and from `COMPOSED` to `SOLD`.
#  Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
#  See [InventoryState](#type-inventorystate) for possible values
    attr_reader :to_state
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] A unique ID generated by Square for the
#  `InventoryAdjustmentGroup`.
    # @param root_adjustment_id [String] The inventory adjustment of the composed variation.
    # @param from_state [square.rb::InventoryState] Representative `from_state` for adjustments within the group. For example, for a
#  group adjustment from `IN_STOCK` to `SOLD`,
#  there can be two component adjustments in the group: one from `IN_STOCK`to
#  `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
#  Here, the representative `from_state` for the `InventoryAdjustmentGroup` is
#  `IN_STOCK`.
#  See [InventoryState](#type-inventorystate) for possible values
    # @param to_state [square.rb::InventoryState] Representative `to_state` for adjustments within group. For example, for a group
#  adjustment from `IN_STOCK` to `SOLD`,
#  the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED`
#  and from `COMPOSED` to `SOLD`.
#  Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
#  See [InventoryState](#type-inventorystate) for possible values
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::InventoryAdjustmentGroup]
    def initialize(id: OMIT, root_adjustment_id: OMIT, from_state: OMIT, to_state: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @root_adjustment_id = root_adjustment_id if root_adjustment_id != OMIT
      @from_state = from_state if from_state != OMIT
      @to_state = to_state if to_state != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "root_adjustment_id": root_adjustment_id, "from_state": from_state, "to_state": to_state }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of InventoryAdjustmentGroup
    #
    # @param json_object [String] 
    # @return [square.rb::InventoryAdjustmentGroup]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      root_adjustment_id = parsed_json["root_adjustment_id"]
      from_state = parsed_json["from_state"]
      to_state = parsed_json["to_state"]
      new(
        id: id,
        root_adjustment_id: root_adjustment_id,
        from_state: from_state,
        to_state: to_state,
        additional_properties: struct
      )
    end
# Serialize an instance of InventoryAdjustmentGroup to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.root_adjustment_id&.is_a?(String) != false || raise("Passed value for field obj.root_adjustment_id is not the expected type, validation failed.")
      obj.from_state&.is_a?(square.rb::InventoryState) != false || raise("Passed value for field obj.from_state is not the expected type, validation failed.")
      obj.to_state&.is_a?(square.rb::InventoryState) != false || raise("Passed value for field obj.to_state is not the expected type, validation failed.")
    end
  end
end