# frozen_string_literal: true
require "ostruct"
require "json"

module square.rb
# Describes save-card action fields.
  class SaveCardOptions
  # @return [String] The square-assigned ID of the customer linked to the saved card.
    attr_reader :customer_id
  # @return [String] The id of the created card-on-file.
    attr_reader :card_id
  # @return [String] An optional user-defined reference ID that can be used to associate
#  this `Card` to another entity in an external system. For example, a customer
#  ID generated by a third-party system.
    attr_reader :reference_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param customer_id [String] The square-assigned ID of the customer linked to the saved card.
    # @param card_id [String] The id of the created card-on-file.
    # @param reference_id [String] An optional user-defined reference ID that can be used to associate
#  this `Card` to another entity in an external system. For example, a customer
#  ID generated by a third-party system.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::SaveCardOptions]
    def initialize(customer_id:, card_id: OMIT, reference_id: OMIT, additional_properties: nil)
      @customer_id = customer_id
      @card_id = card_id if card_id != OMIT
      @reference_id = reference_id if reference_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "customer_id": customer_id, "card_id": card_id, "reference_id": reference_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of SaveCardOptions
    #
    # @param json_object [String] 
    # @return [square.rb::SaveCardOptions]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      customer_id = parsed_json["customer_id"]
      card_id = parsed_json["card_id"]
      reference_id = parsed_json["reference_id"]
      new(
        customer_id: customer_id,
        card_id: card_id,
        reference_id: reference_id,
        additional_properties: struct
      )
    end
# Serialize an instance of SaveCardOptions to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.customer_id.is_a?(String) != false || raise("Passed value for field obj.customer_id is not the expected type, validation failed.")
      obj.card_id&.is_a?(String) != false || raise("Passed value for field obj.card_id is not the expected type, validation failed.")
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
    end
  end
end