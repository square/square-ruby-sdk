# frozen_string_literal: true
require_relative "money"
require_relative "payment_options"
require_relative "device_checkout_options"
require_relative "action_cancel_reason"
require_relative "checkout_options_payment_type"
require "ostruct"
require "json"

module square.rb
# Represents a checkout processed by the Square Terminal.
  class TerminalCheckout
  # @return [String] A unique ID for this `TerminalCheckout`.
    attr_reader :id
  # @return [square.rb::Money] The amount of money (including the tax amount) that the Square Terminal device
#  should try to collect.
    attr_reader :amount_money
  # @return [String] An optional user-defined reference ID that can be used to associate
#  this `TerminalCheckout` to another entity in an external system. For example, an
#  order
#  ID generated by a third-party shopping cart. The ID is also associated with any
#  payments
#  used to complete the checkout.
    attr_reader :reference_id
  # @return [String] An optional note to associate with the checkout, as well as with any payments
#  used to complete the checkout.
#  Note: maximum 500 characters
    attr_reader :note
  # @return [String] The reference to the Square order ID for the checkout request.
    attr_reader :order_id
  # @return [square.rb::PaymentOptions] Payment-specific options for the checkout request.
    attr_reader :payment_options
  # @return [square.rb::DeviceCheckoutOptions] Options to control the display and behavior of the Square Terminal device.
    attr_reader :device_options
  # @return [String] An RFC 3339 duration, after which the checkout is automatically canceled.
#  A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a
#  cancellation reason
#  of `TIMED_OUT`.
#  Default: 5 minutes from creation
#  Maximum: 5 minutes
    attr_reader :deadline_duration
  # @return [String] The status of the `TerminalCheckout`.
#  Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
    attr_reader :status
  # @return [square.rb::ActionCancelReason] The reason why `TerminalCheckout` is canceled. Present if the status is
#  `CANCELED`.
#  See [ActionCancelReason](#type-actioncancelreason) for possible values
    attr_reader :cancel_reason
  # @return [Array<String>] A list of IDs for payments created by this `TerminalCheckout`.
    attr_reader :payment_ids
  # @return [String] The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.
    attr_reader :created_at
  # @return [String] The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.
    attr_reader :updated_at
  # @return [String] The ID of the application that created the checkout.
    attr_reader :app_id
  # @return [String] The location of the device where the `TerminalCheckout` was directed.
    attr_reader :location_id
  # @return [square.rb::CheckoutOptionsPaymentType] The type of payment the terminal should attempt to capture from. Defaults to
#  `CARD_PRESENT`.
#  See [CheckoutOptionsPaymentType](#type-checkoutoptionspaymenttype) for possible
#  values
    attr_reader :payment_type
  # @return [String] An optional ID of the team member associated with creating the checkout.
    attr_reader :team_member_id
  # @return [String] An optional ID of the customer associated with the checkout.
    attr_reader :customer_id
  # @return [square.rb::Money] The amount the developer is taking as a fee for facilitating the payment on
#  behalf
#  of the seller.
#  The amount cannot be more than 90% of the total amount of the payment.
#  The amount must be specified in the smallest denomination of the applicable
#  currency (for example, US dollar amounts are specified in cents). For more
#  information, see [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
#  The fee currency code must match the currency associated with the seller that is
#  accepting the payment. The application must be from a developer account in the
#  same country and using the same currency code as the seller.
#  For more information about the application fee scenario, see [Take Payments and
#  Collect
#  ttps://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
#  To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is
#  required. For more information, see
#  oper.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
    attr_reader :app_fee_money
  # @return [String] Optional additional payment information to include on the customer's card
#  statement as
#  part of the statement description. This can be, for example, an invoice number,
#  ticket number,
#  or short description that uniquely identifies the purchase.
    attr_reader :statement_description_identifier
  # @return [square.rb::Money] The amount designated as a tip, in addition to `amount_money`. This may only be
#  set for a
#  checkout that has tipping disabled (`tip_settings.allow_tipping` is `false`).
    attr_reader :tip_money
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] A unique ID for this `TerminalCheckout`.
    # @param amount_money [square.rb::Money] The amount of money (including the tax amount) that the Square Terminal device
#  should try to collect.
    # @param reference_id [String] An optional user-defined reference ID that can be used to associate
#  this `TerminalCheckout` to another entity in an external system. For example, an
#  order
#  ID generated by a third-party shopping cart. The ID is also associated with any
#  payments
#  used to complete the checkout.
    # @param note [String] An optional note to associate with the checkout, as well as with any payments
#  used to complete the checkout.
#  Note: maximum 500 characters
    # @param order_id [String] The reference to the Square order ID for the checkout request.
    # @param payment_options [square.rb::PaymentOptions] Payment-specific options for the checkout request.
    # @param device_options [square.rb::DeviceCheckoutOptions] Options to control the display and behavior of the Square Terminal device.
    # @param deadline_duration [String] An RFC 3339 duration, after which the checkout is automatically canceled.
#  A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a
#  cancellation reason
#  of `TIMED_OUT`.
#  Default: 5 minutes from creation
#  Maximum: 5 minutes
    # @param status [String] The status of the `TerminalCheckout`.
#  Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
    # @param cancel_reason [square.rb::ActionCancelReason] The reason why `TerminalCheckout` is canceled. Present if the status is
#  `CANCELED`.
#  See [ActionCancelReason](#type-actioncancelreason) for possible values
    # @param payment_ids [Array<String>] A list of IDs for payments created by this `TerminalCheckout`.
    # @param created_at [String] The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.
    # @param updated_at [String] The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.
    # @param app_id [String] The ID of the application that created the checkout.
    # @param location_id [String] The location of the device where the `TerminalCheckout` was directed.
    # @param payment_type [square.rb::CheckoutOptionsPaymentType] The type of payment the terminal should attempt to capture from. Defaults to
#  `CARD_PRESENT`.
#  See [CheckoutOptionsPaymentType](#type-checkoutoptionspaymenttype) for possible
#  values
    # @param team_member_id [String] An optional ID of the team member associated with creating the checkout.
    # @param customer_id [String] An optional ID of the customer associated with the checkout.
    # @param app_fee_money [square.rb::Money] The amount the developer is taking as a fee for facilitating the payment on
#  behalf
#  of the seller.
#  The amount cannot be more than 90% of the total amount of the payment.
#  The amount must be specified in the smallest denomination of the applicable
#  currency (for example, US dollar amounts are specified in cents). For more
#  information, see [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
#  The fee currency code must match the currency associated with the seller that is
#  accepting the payment. The application must be from a developer account in the
#  same country and using the same currency code as the seller.
#  For more information about the application fee scenario, see [Take Payments and
#  Collect
#  ttps://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
#  To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is
#  required. For more information, see
#  oper.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
    # @param statement_description_identifier [String] Optional additional payment information to include on the customer's card
#  statement as
#  part of the statement description. This can be, for example, an invoice number,
#  ticket number,
#  or short description that uniquely identifies the purchase.
    # @param tip_money [square.rb::Money] The amount designated as a tip, in addition to `amount_money`. This may only be
#  set for a
#  checkout that has tipping disabled (`tip_settings.allow_tipping` is `false`).
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::TerminalCheckout]
    def initialize(id: OMIT, amount_money:, reference_id: OMIT, note: OMIT, order_id: OMIT, payment_options: OMIT, device_options:, deadline_duration: OMIT, status: OMIT, cancel_reason: OMIT, payment_ids: OMIT, created_at: OMIT, updated_at: OMIT, app_id: OMIT, location_id: OMIT, payment_type: OMIT, team_member_id: OMIT, customer_id: OMIT, app_fee_money: OMIT, statement_description_identifier: OMIT, tip_money: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @amount_money = amount_money
      @reference_id = reference_id if reference_id != OMIT
      @note = note if note != OMIT
      @order_id = order_id if order_id != OMIT
      @payment_options = payment_options if payment_options != OMIT
      @device_options = device_options
      @deadline_duration = deadline_duration if deadline_duration != OMIT
      @status = status if status != OMIT
      @cancel_reason = cancel_reason if cancel_reason != OMIT
      @payment_ids = payment_ids if payment_ids != OMIT
      @created_at = created_at if created_at != OMIT
      @updated_at = updated_at if updated_at != OMIT
      @app_id = app_id if app_id != OMIT
      @location_id = location_id if location_id != OMIT
      @payment_type = payment_type if payment_type != OMIT
      @team_member_id = team_member_id if team_member_id != OMIT
      @customer_id = customer_id if customer_id != OMIT
      @app_fee_money = app_fee_money if app_fee_money != OMIT
      @statement_description_identifier = statement_description_identifier if statement_description_identifier != OMIT
      @tip_money = tip_money if tip_money != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "amount_money": amount_money, "reference_id": reference_id, "note": note, "order_id": order_id, "payment_options": payment_options, "device_options": device_options, "deadline_duration": deadline_duration, "status": status, "cancel_reason": cancel_reason, "payment_ids": payment_ids, "created_at": created_at, "updated_at": updated_at, "app_id": app_id, "location_id": location_id, "payment_type": payment_type, "team_member_id": team_member_id, "customer_id": customer_id, "app_fee_money": app_fee_money, "statement_description_identifier": statement_description_identifier, "tip_money": tip_money }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of TerminalCheckout
    #
    # @param json_object [String] 
    # @return [square.rb::TerminalCheckout]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = square.rb::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      reference_id = parsed_json["reference_id"]
      note = parsed_json["note"]
      order_id = parsed_json["order_id"]
      unless parsed_json["payment_options"].nil?
        payment_options = parsed_json["payment_options"].to_json
        payment_options = square.rb::PaymentOptions.from_json(json_object: payment_options)
      else
        payment_options = nil
      end
      unless parsed_json["device_options"].nil?
        device_options = parsed_json["device_options"].to_json
        device_options = square.rb::DeviceCheckoutOptions.from_json(json_object: device_options)
      else
        device_options = nil
      end
      deadline_duration = parsed_json["deadline_duration"]
      status = parsed_json["status"]
      cancel_reason = parsed_json["cancel_reason"]
      payment_ids = parsed_json["payment_ids"]
      created_at = parsed_json["created_at"]
      updated_at = parsed_json["updated_at"]
      app_id = parsed_json["app_id"]
      location_id = parsed_json["location_id"]
      payment_type = parsed_json["payment_type"]
      team_member_id = parsed_json["team_member_id"]
      customer_id = parsed_json["customer_id"]
      unless parsed_json["app_fee_money"].nil?
        app_fee_money = parsed_json["app_fee_money"].to_json
        app_fee_money = square.rb::Money.from_json(json_object: app_fee_money)
      else
        app_fee_money = nil
      end
      statement_description_identifier = parsed_json["statement_description_identifier"]
      unless parsed_json["tip_money"].nil?
        tip_money = parsed_json["tip_money"].to_json
        tip_money = square.rb::Money.from_json(json_object: tip_money)
      else
        tip_money = nil
      end
      new(
        id: id,
        amount_money: amount_money,
        reference_id: reference_id,
        note: note,
        order_id: order_id,
        payment_options: payment_options,
        device_options: device_options,
        deadline_duration: deadline_duration,
        status: status,
        cancel_reason: cancel_reason,
        payment_ids: payment_ids,
        created_at: created_at,
        updated_at: updated_at,
        app_id: app_id,
        location_id: location_id,
        payment_type: payment_type,
        team_member_id: team_member_id,
        customer_id: customer_id,
        app_fee_money: app_fee_money,
        statement_description_identifier: statement_description_identifier,
        tip_money: tip_money,
        additional_properties: struct
      )
    end
# Serialize an instance of TerminalCheckout to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      square.rb::Money.validate_raw(obj: obj.amount_money)
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
      obj.note&.is_a?(String) != false || raise("Passed value for field obj.note is not the expected type, validation failed.")
      obj.order_id&.is_a?(String) != false || raise("Passed value for field obj.order_id is not the expected type, validation failed.")
      obj.payment_options.nil? || square.rb::PaymentOptions.validate_raw(obj: obj.payment_options)
      square.rb::DeviceCheckoutOptions.validate_raw(obj: obj.device_options)
      obj.deadline_duration&.is_a?(String) != false || raise("Passed value for field obj.deadline_duration is not the expected type, validation failed.")
      obj.status&.is_a?(String) != false || raise("Passed value for field obj.status is not the expected type, validation failed.")
      obj.cancel_reason&.is_a?(square.rb::ActionCancelReason) != false || raise("Passed value for field obj.cancel_reason is not the expected type, validation failed.")
      obj.payment_ids&.is_a?(Array) != false || raise("Passed value for field obj.payment_ids is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.updated_at&.is_a?(String) != false || raise("Passed value for field obj.updated_at is not the expected type, validation failed.")
      obj.app_id&.is_a?(String) != false || raise("Passed value for field obj.app_id is not the expected type, validation failed.")
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
      obj.payment_type&.is_a?(square.rb::CheckoutOptionsPaymentType) != false || raise("Passed value for field obj.payment_type is not the expected type, validation failed.")
      obj.team_member_id&.is_a?(String) != false || raise("Passed value for field obj.team_member_id is not the expected type, validation failed.")
      obj.customer_id&.is_a?(String) != false || raise("Passed value for field obj.customer_id is not the expected type, validation failed.")
      obj.app_fee_money.nil? || square.rb::Money.validate_raw(obj: obj.app_fee_money)
      obj.statement_description_identifier&.is_a?(String) != false || raise("Passed value for field obj.statement_description_identifier is not the expected type, validation failed.")
      obj.tip_money.nil? || square.rb::Money.validate_raw(obj: obj.tip_money)
    end
  end
end