# frozen_string_literal: true
require "ostruct"
require "json"

module square.rb
# An image file to use in Square catalogs. It can be associated with
#  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, and
#  `CatalogModifierList` objects.
#  Only the images on items and item variations are exposed in Dashboard.
#  Only the first image on an item is displayed in Square Point of Sale (SPOS).
#  Images on items and variations are displayed through Square Online Store.
#  Images on other object types are for use by 3rd party application developers.
  class CatalogImage
  # @return [String] The internal name to identify this image in calls to the Square API.
#  This is a searchable attribute for use in applicable query filters
#  using the [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
#  It is not unique and should not be shown in a buyer facing context.
    attr_reader :name
  # @return [String] The URL of this image, generated by Square after an image is uploaded
#  using the [CreateCatalogImage](api-endpoint:Catalog-CreateCatalogImage)
#  endpoint.
#  To modify the image, use the UpdateCatalogImage endpoint. Do not change the URL
#  field.
    attr_reader :url
  # @return [String] A caption that describes what is shown in the image. Displayed in the
#  Square Online Store. This is a searchable attribute for use in applicable query
#  filters
#  using the [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
    attr_reader :caption
  # @return [String] The immutable order ID for this image object created by the Photo Studio service
#  in Square Online Store.
    attr_reader :photo_studio_order_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param name [String] The internal name to identify this image in calls to the Square API.
#  This is a searchable attribute for use in applicable query filters
#  using the [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
#  It is not unique and should not be shown in a buyer facing context.
    # @param url [String] The URL of this image, generated by Square after an image is uploaded
#  using the [CreateCatalogImage](api-endpoint:Catalog-CreateCatalogImage)
#  endpoint.
#  To modify the image, use the UpdateCatalogImage endpoint. Do not change the URL
#  field.
    # @param caption [String] A caption that describes what is shown in the image. Displayed in the
#  Square Online Store. This is a searchable attribute for use in applicable query
#  filters
#  using the [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
    # @param photo_studio_order_id [String] The immutable order ID for this image object created by the Photo Studio service
#  in Square Online Store.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::CatalogImage]
    def initialize(name: OMIT, url: OMIT, caption: OMIT, photo_studio_order_id: OMIT, additional_properties: nil)
      @name = name if name != OMIT
      @url = url if url != OMIT
      @caption = caption if caption != OMIT
      @photo_studio_order_id = photo_studio_order_id if photo_studio_order_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "name": name, "url": url, "caption": caption, "photo_studio_order_id": photo_studio_order_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of CatalogImage
    #
    # @param json_object [String] 
    # @return [square.rb::CatalogImage]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      name = parsed_json["name"]
      url = parsed_json["url"]
      caption = parsed_json["caption"]
      photo_studio_order_id = parsed_json["photo_studio_order_id"]
      new(
        name: name,
        url: url,
        caption: caption,
        photo_studio_order_id: photo_studio_order_id,
        additional_properties: struct
      )
    end
# Serialize an instance of CatalogImage to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.name&.is_a?(String) != false || raise("Passed value for field obj.name is not the expected type, validation failed.")
      obj.url&.is_a?(String) != false || raise("Passed value for field obj.url is not the expected type, validation failed.")
      obj.caption&.is_a?(String) != false || raise("Passed value for field obj.caption is not the expected type, validation failed.")
      obj.photo_studio_order_id&.is_a?(String) != false || raise("Passed value for field obj.photo_studio_order_id is not the expected type, validation failed.")
    end
  end
end