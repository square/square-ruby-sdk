# frozen_string_literal: true
require "ostruct"
require "json"

module square.rb
# Links an order line item to a fulfillment. Each entry must reference
#  a valid `uid` for an order line item in the `line_item_uid` field, as well as a
#  `quantity` to
#  fulfill.
  class FulfillmentFulfillmentEntry
  # @return [String] A unique ID that identifies the fulfillment entry only within this order.
    attr_reader :uid
  # @return [String] The `uid` from the order line item.
    attr_reader :line_item_uid
  # @return [String] The quantity of the line item being fulfilled, formatted as a decimal number.
#  For example, `"3"`.
#  Fulfillments for line items with a `quantity_unit` can have non-integer
#  quantities.
#  For example, `"1.70000"`.
    attr_reader :quantity
  # @return [Hash{String => String}] Application-defined data attached to this fulfillment entry. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    attr_reader :metadata
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param uid [String] A unique ID that identifies the fulfillment entry only within this order.
    # @param line_item_uid [String] The `uid` from the order line item.
    # @param quantity [String] The quantity of the line item being fulfilled, formatted as a decimal number.
#  For example, `"3"`.
#  Fulfillments for line items with a `quantity_unit` can have non-integer
#  quantities.
#  For example, `"1.70000"`.
    # @param metadata [Hash{String => String}] Application-defined data attached to this fulfillment entry. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::FulfillmentFulfillmentEntry]
    def initialize(uid: OMIT, line_item_uid:, quantity:, metadata: OMIT, additional_properties: nil)
      @uid = uid if uid != OMIT
      @line_item_uid = line_item_uid
      @quantity = quantity
      @metadata = metadata if metadata != OMIT
      @additional_properties = additional_properties
      @_field_set = { "uid": uid, "line_item_uid": line_item_uid, "quantity": quantity, "metadata": metadata }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of FulfillmentFulfillmentEntry
    #
    # @param json_object [String] 
    # @return [square.rb::FulfillmentFulfillmentEntry]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      uid = parsed_json["uid"]
      line_item_uid = parsed_json["line_item_uid"]
      quantity = parsed_json["quantity"]
      metadata = parsed_json["metadata"]
      new(
        uid: uid,
        line_item_uid: line_item_uid,
        quantity: quantity,
        metadata: metadata,
        additional_properties: struct
      )
    end
# Serialize an instance of FulfillmentFulfillmentEntry to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.uid&.is_a?(String) != false || raise("Passed value for field obj.uid is not the expected type, validation failed.")
      obj.line_item_uid.is_a?(String) != false || raise("Passed value for field obj.line_item_uid is not the expected type, validation failed.")
      obj.quantity.is_a?(String) != false || raise("Passed value for field obj.quantity is not the expected type, validation failed.")
      obj.metadata&.is_a?(Hash) != false || raise("Passed value for field obj.metadata is not the expected type, validation failed.")
    end
  end
end