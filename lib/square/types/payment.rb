# frozen_string_literal: true
require_relative "money"
require_relative "processing_fee"
require_relative "card_payment_details"
require_relative "cash_payment_details"
require_relative "bank_account_payment_details"
require_relative "external_payment_details"
require_relative "digital_wallet_details"
require_relative "buy_now_pay_later_details"
require_relative "square_account_details"
require_relative "risk_evaluation"
require_relative "address"
require_relative "device_details"
require_relative "application_details"
require_relative "offline_payment_details"
require "ostruct"
require "json"

module square.rb
# Represents a payment processed by the Square API.
  class Payment
  # @return [String] A unique ID for the payment.
    attr_reader :id
  # @return [String] The timestamp of when the payment was created, in RFC 3339 format.
    attr_reader :created_at
  # @return [String] The timestamp of when the payment was last updated, in RFC 3339 format.
    attr_reader :updated_at
  # @return [square.rb::Money] The amount processed for this payment, not including `tip_money`.
#  The amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    attr_reader :amount_money
  # @return [square.rb::Money] The amount designated as a tip.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    attr_reader :tip_money
  # @return [square.rb::Money] The total amount for the payment, including `amount_money` and `tip_money`.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    attr_reader :total_money
  # @return [square.rb::Money] The amount the developer is taking as a fee for facilitating the payment on
#  behalf
#  of the seller. This amount is specified in the smallest denomination of the
#  applicable currency
#  (for example, US dollar amounts are specified in cents). For more information,
#  see [Take Payments and Collect
#  ttps://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
#  The amount cannot be more than 90% of the `total_money` value.
#  To set this field, `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is
#  required.
#  For more information, see
#  oper.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
    attr_reader :app_fee_money
  # @return [square.rb::Money] The amount of money approved for this payment. This value may change if Square
#  chooses to
#  obtain reauthorization as part of a call to
#  [UpdatePayment](api-endpoint:Payments-UpdatePayment).
    attr_reader :approved_money
  # @return [Array<square.rb::ProcessingFee>] The processing fees and fee adjustments assessed by Square for this payment.
    attr_reader :processing_fee
  # @return [square.rb::Money] The total amount of the payment refunded to date.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents).
    attr_reader :refunded_money
  # @return [String] Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or
#  FAILED.
    attr_reader :status
  # @return [String] The duration of time after the payment's creation when Square automatically
#  applies the
#  `delay_action` to the payment. This automatic `delay_action` applies only to
#  payments that
#  do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the
#  `delay_duration`
#  time period.
#  This field is specified as a time duration, in RFC 3339 format.
#  Notes:
#  This feature is only supported for card payments.
#  Default:
#  - Card-present payments: "PT36H" (36 hours) from the creation time.
#  - Card-not-present payments: "P7D" (7 days) from the creation time.
    attr_reader :delay_duration
  # @return [String] The action to be applied to the payment when the `delay_duration` has elapsed.
#  Current values include `CANCEL` and `COMPLETE`.
    attr_reader :delay_action
  # @return [String] The read-only timestamp of when the `delay_action` is automatically applied,
#  in RFC 3339 format.
#  Note that this field is calculated by summing the payment's `delay_duration` and
#  `created_at`
#  fields. The `created_at` field is generated by Square and might not exactly
#  match the
#  time on your local machine.
    attr_reader :delayed_until
  # @return [String] The source type for this payment.
#  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`,
#  `SQUARE_ACCOUNT`,
#  `CASH` and `EXTERNAL`. For information about these payment source types,
#  see [Take
#  Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    attr_reader :source_type
  # @return [square.rb::CardPaymentDetails] Details about a card payment. These details are only populated if the
#  source_type is `CARD`.
    attr_reader :card_details
  # @return [square.rb::CashPaymentDetails] Details about a cash payment. These details are only populated if the
#  source_type is `CASH`.
    attr_reader :cash_details
  # @return [square.rb::BankAccountPaymentDetails] Details about a bank account payment. These details are only populated if the
#  source_type is `BANK_ACCOUNT`.
    attr_reader :bank_account_details
  # @return [square.rb::ExternalPaymentDetails] Details about an external payment. The details are only populated
#  if the `source_type` is `EXTERNAL`.
    attr_reader :external_details
  # @return [square.rb::DigitalWalletDetails] Details about an wallet payment. The details are only populated
#  if the `source_type` is `WALLET`.
    attr_reader :wallet_details
  # @return [square.rb::BuyNowPayLaterDetails] Details about a Buy Now Pay Later payment. The details are only populated
#  if the `source_type` is `BUY_NOW_PAY_LATER`. For more information, see
#  [Afterpay
#  tps://developer.squareup.com/docs/payments-api/take-payments/afterpay-payments).
    attr_reader :buy_now_pay_later_details
  # @return [square.rb::SquareAccountDetails] Details about a Square Account payment. The details are only populated
#  if the `source_type` is `SQUARE_ACCOUNT`.
    attr_reader :square_account_details
  # @return [String] The ID of the location associated with the payment.
    attr_reader :location_id
  # @return [String] The ID of the order associated with the payment.
    attr_reader :order_id
  # @return [String] An optional ID that associates the payment with an entity in
#  another system.
    attr_reader :reference_id
  # @return [String] The ID of the customer associated with the payment. If the ID is
#  not provided in the `CreatePayment` request that was used to create the
#  `Payment`,
#  Square may use information in the request
#  (such as the billing and shipping address, email address, and payment source)
#  to identify a matching customer profile in the Customer Directory.
#  If found, the profile ID is used. If a profile is not found, the
#  API attempts to create an
#  [instant
#  ttps://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
#  If the API cannot create an
#  instant profile (either because the seller has disabled it or the
#  seller's region prevents creating it), this field remains unset. Note that
#  this process is asynchronous and it may take some time before a
#  customer ID is added to the payment.
    attr_reader :customer_id
  # @return [String] __Deprecated__: Use `Payment.team_member_id` instead.
#  An optional ID of the employee associated with taking the payment.
    attr_reader :employee_id
  # @return [String] An optional ID of the [TeamMember](entity:TeamMember) associated with taking the
#  payment.
    attr_reader :team_member_id
  # @return [Array<String>] A list of `refund_id`s identifying refunds for the payment.
    attr_reader :refund_ids
  # @return [square.rb::RiskEvaluation] Provides information about the risk associated with the payment, as determined
#  by Square.
#  This field is present for payments to sellers that have opted in to receive risk
#  evaluations.
    attr_reader :risk_evaluation
  # @return [String] An optional ID for a Terminal checkout that is associated with the payment.
    attr_reader :terminal_checkout_id
  # @return [String] The buyer's email address.
    attr_reader :buyer_email_address
  # @return [square.rb::Address] The buyer's billing address.
    attr_reader :billing_address
  # @return [square.rb::Address] The buyer's shipping address.
    attr_reader :shipping_address
  # @return [String] An optional note to include when creating a payment.
    attr_reader :note
  # @return [String] Additional payment information that gets added to the customer's card statement
#  as part of the statement description.
#  Note that the `statement_description_identifier` might get truncated on the
#  statement description
#  to fit the required information including the Square identifier (SQ *) and the
#  name of the
#  seller taking the payment.
    attr_reader :statement_description_identifier
  # @return [Array<String>] Actions that can be performed on this payment:
#  - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
#  - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
#  - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
#  - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
#  - `EDIT_DELAY_ACTION` - The delay_action can be edited.
    attr_reader :capabilities
  # @return [String] The payment's receipt number.
#  The field is missing if a payment is canceled.
    attr_reader :receipt_number
  # @return [String] The URL for the payment's receipt.
#  The field is only populated for COMPLETED payments.
    attr_reader :receipt_url
  # @return [square.rb::DeviceDetails] Details about the device that took the payment.
    attr_reader :device_details
  # @return [square.rb::ApplicationDetails] Details about the application that took the payment.
    attr_reader :application_details
  # @return [Boolean] Whether or not this payment was taken offline.
    attr_reader :is_offline_payment
  # @return [square.rb::OfflinePaymentDetails] Additional information about the payment if it was taken offline.
    attr_reader :offline_payment_details
  # @return [String] Used for optimistic concurrency. This opaque token identifies a specific version
#  of the
#  `Payment` object.
    attr_reader :version_token
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] A unique ID for the payment.
    # @param created_at [String] The timestamp of when the payment was created, in RFC 3339 format.
    # @param updated_at [String] The timestamp of when the payment was last updated, in RFC 3339 format.
    # @param amount_money [square.rb::Money] The amount processed for this payment, not including `tip_money`.
#  The amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    # @param tip_money [square.rb::Money] The amount designated as a tip.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    # @param total_money [square.rb::Money] The total amount for the payment, including `amount_money` and `tip_money`.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    # @param app_fee_money [square.rb::Money] The amount the developer is taking as a fee for facilitating the payment on
#  behalf
#  of the seller. This amount is specified in the smallest denomination of the
#  applicable currency
#  (for example, US dollar amounts are specified in cents). For more information,
#  see [Take Payments and Collect
#  ttps://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
#  The amount cannot be more than 90% of the `total_money` value.
#  To set this field, `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is
#  required.
#  For more information, see
#  oper.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
    # @param approved_money [square.rb::Money] The amount of money approved for this payment. This value may change if Square
#  chooses to
#  obtain reauthorization as part of a call to
#  [UpdatePayment](api-endpoint:Payments-UpdatePayment).
    # @param processing_fee [Array<square.rb::ProcessingFee>] The processing fees and fee adjustments assessed by Square for this payment.
    # @param refunded_money [square.rb::Money] The total amount of the payment refunded to date.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents).
    # @param status [String] Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or
#  FAILED.
    # @param delay_duration [String] The duration of time after the payment's creation when Square automatically
#  applies the
#  `delay_action` to the payment. This automatic `delay_action` applies only to
#  payments that
#  do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the
#  `delay_duration`
#  time period.
#  This field is specified as a time duration, in RFC 3339 format.
#  Notes:
#  This feature is only supported for card payments.
#  Default:
#  - Card-present payments: "PT36H" (36 hours) from the creation time.
#  - Card-not-present payments: "P7D" (7 days) from the creation time.
    # @param delay_action [String] The action to be applied to the payment when the `delay_duration` has elapsed.
#  Current values include `CANCEL` and `COMPLETE`.
    # @param delayed_until [String] The read-only timestamp of when the `delay_action` is automatically applied,
#  in RFC 3339 format.
#  Note that this field is calculated by summing the payment's `delay_duration` and
#  `created_at`
#  fields. The `created_at` field is generated by Square and might not exactly
#  match the
#  time on your local machine.
    # @param source_type [String] The source type for this payment.
#  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`,
#  `SQUARE_ACCOUNT`,
#  `CASH` and `EXTERNAL`. For information about these payment source types,
#  see [Take
#  Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    # @param card_details [square.rb::CardPaymentDetails] Details about a card payment. These details are only populated if the
#  source_type is `CARD`.
    # @param cash_details [square.rb::CashPaymentDetails] Details about a cash payment. These details are only populated if the
#  source_type is `CASH`.
    # @param bank_account_details [square.rb::BankAccountPaymentDetails] Details about a bank account payment. These details are only populated if the
#  source_type is `BANK_ACCOUNT`.
    # @param external_details [square.rb::ExternalPaymentDetails] Details about an external payment. The details are only populated
#  if the `source_type` is `EXTERNAL`.
    # @param wallet_details [square.rb::DigitalWalletDetails] Details about an wallet payment. The details are only populated
#  if the `source_type` is `WALLET`.
    # @param buy_now_pay_later_details [square.rb::BuyNowPayLaterDetails] Details about a Buy Now Pay Later payment. The details are only populated
#  if the `source_type` is `BUY_NOW_PAY_LATER`. For more information, see
#  [Afterpay
#  tps://developer.squareup.com/docs/payments-api/take-payments/afterpay-payments).
    # @param square_account_details [square.rb::SquareAccountDetails] Details about a Square Account payment. The details are only populated
#  if the `source_type` is `SQUARE_ACCOUNT`.
    # @param location_id [String] The ID of the location associated with the payment.
    # @param order_id [String] The ID of the order associated with the payment.
    # @param reference_id [String] An optional ID that associates the payment with an entity in
#  another system.
    # @param customer_id [String] The ID of the customer associated with the payment. If the ID is
#  not provided in the `CreatePayment` request that was used to create the
#  `Payment`,
#  Square may use information in the request
#  (such as the billing and shipping address, email address, and payment source)
#  to identify a matching customer profile in the Customer Directory.
#  If found, the profile ID is used. If a profile is not found, the
#  API attempts to create an
#  [instant
#  ttps://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
#  If the API cannot create an
#  instant profile (either because the seller has disabled it or the
#  seller's region prevents creating it), this field remains unset. Note that
#  this process is asynchronous and it may take some time before a
#  customer ID is added to the payment.
    # @param employee_id [String] __Deprecated__: Use `Payment.team_member_id` instead.
#  An optional ID of the employee associated with taking the payment.
    # @param team_member_id [String] An optional ID of the [TeamMember](entity:TeamMember) associated with taking the
#  payment.
    # @param refund_ids [Array<String>] A list of `refund_id`s identifying refunds for the payment.
    # @param risk_evaluation [square.rb::RiskEvaluation] Provides information about the risk associated with the payment, as determined
#  by Square.
#  This field is present for payments to sellers that have opted in to receive risk
#  evaluations.
    # @param terminal_checkout_id [String] An optional ID for a Terminal checkout that is associated with the payment.
    # @param buyer_email_address [String] The buyer's email address.
    # @param billing_address [square.rb::Address] The buyer's billing address.
    # @param shipping_address [square.rb::Address] The buyer's shipping address.
    # @param note [String] An optional note to include when creating a payment.
    # @param statement_description_identifier [String] Additional payment information that gets added to the customer's card statement
#  as part of the statement description.
#  Note that the `statement_description_identifier` might get truncated on the
#  statement description
#  to fit the required information including the Square identifier (SQ *) and the
#  name of the
#  seller taking the payment.
    # @param capabilities [Array<String>] Actions that can be performed on this payment:
#  - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
#  - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
#  - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
#  - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
#  - `EDIT_DELAY_ACTION` - The delay_action can be edited.
    # @param receipt_number [String] The payment's receipt number.
#  The field is missing if a payment is canceled.
    # @param receipt_url [String] The URL for the payment's receipt.
#  The field is only populated for COMPLETED payments.
    # @param device_details [square.rb::DeviceDetails] Details about the device that took the payment.
    # @param application_details [square.rb::ApplicationDetails] Details about the application that took the payment.
    # @param is_offline_payment [Boolean] Whether or not this payment was taken offline.
    # @param offline_payment_details [square.rb::OfflinePaymentDetails] Additional information about the payment if it was taken offline.
    # @param version_token [String] Used for optimistic concurrency. This opaque token identifies a specific version
#  of the
#  `Payment` object.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::Payment]
    def initialize(id: OMIT, created_at: OMIT, updated_at: OMIT, amount_money: OMIT, tip_money: OMIT, total_money: OMIT, app_fee_money: OMIT, approved_money: OMIT, processing_fee: OMIT, refunded_money: OMIT, status: OMIT, delay_duration: OMIT, delay_action: OMIT, delayed_until: OMIT, source_type: OMIT, card_details: OMIT, cash_details: OMIT, bank_account_details: OMIT, external_details: OMIT, wallet_details: OMIT, buy_now_pay_later_details: OMIT, square_account_details: OMIT, location_id: OMIT, order_id: OMIT, reference_id: OMIT, customer_id: OMIT, employee_id: OMIT, team_member_id: OMIT, refund_ids: OMIT, risk_evaluation: OMIT, terminal_checkout_id: OMIT, buyer_email_address: OMIT, billing_address: OMIT, shipping_address: OMIT, note: OMIT, statement_description_identifier: OMIT, capabilities: OMIT, receipt_number: OMIT, receipt_url: OMIT, device_details: OMIT, application_details: OMIT, is_offline_payment: OMIT, offline_payment_details: OMIT, version_token: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @created_at = created_at if created_at != OMIT
      @updated_at = updated_at if updated_at != OMIT
      @amount_money = amount_money if amount_money != OMIT
      @tip_money = tip_money if tip_money != OMIT
      @total_money = total_money if total_money != OMIT
      @app_fee_money = app_fee_money if app_fee_money != OMIT
      @approved_money = approved_money if approved_money != OMIT
      @processing_fee = processing_fee if processing_fee != OMIT
      @refunded_money = refunded_money if refunded_money != OMIT
      @status = status if status != OMIT
      @delay_duration = delay_duration if delay_duration != OMIT
      @delay_action = delay_action if delay_action != OMIT
      @delayed_until = delayed_until if delayed_until != OMIT
      @source_type = source_type if source_type != OMIT
      @card_details = card_details if card_details != OMIT
      @cash_details = cash_details if cash_details != OMIT
      @bank_account_details = bank_account_details if bank_account_details != OMIT
      @external_details = external_details if external_details != OMIT
      @wallet_details = wallet_details if wallet_details != OMIT
      @buy_now_pay_later_details = buy_now_pay_later_details if buy_now_pay_later_details != OMIT
      @square_account_details = square_account_details if square_account_details != OMIT
      @location_id = location_id if location_id != OMIT
      @order_id = order_id if order_id != OMIT
      @reference_id = reference_id if reference_id != OMIT
      @customer_id = customer_id if customer_id != OMIT
      @employee_id = employee_id if employee_id != OMIT
      @team_member_id = team_member_id if team_member_id != OMIT
      @refund_ids = refund_ids if refund_ids != OMIT
      @risk_evaluation = risk_evaluation if risk_evaluation != OMIT
      @terminal_checkout_id = terminal_checkout_id if terminal_checkout_id != OMIT
      @buyer_email_address = buyer_email_address if buyer_email_address != OMIT
      @billing_address = billing_address if billing_address != OMIT
      @shipping_address = shipping_address if shipping_address != OMIT
      @note = note if note != OMIT
      @statement_description_identifier = statement_description_identifier if statement_description_identifier != OMIT
      @capabilities = capabilities if capabilities != OMIT
      @receipt_number = receipt_number if receipt_number != OMIT
      @receipt_url = receipt_url if receipt_url != OMIT
      @device_details = device_details if device_details != OMIT
      @application_details = application_details if application_details != OMIT
      @is_offline_payment = is_offline_payment if is_offline_payment != OMIT
      @offline_payment_details = offline_payment_details if offline_payment_details != OMIT
      @version_token = version_token if version_token != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "created_at": created_at, "updated_at": updated_at, "amount_money": amount_money, "tip_money": tip_money, "total_money": total_money, "app_fee_money": app_fee_money, "approved_money": approved_money, "processing_fee": processing_fee, "refunded_money": refunded_money, "status": status, "delay_duration": delay_duration, "delay_action": delay_action, "delayed_until": delayed_until, "source_type": source_type, "card_details": card_details, "cash_details": cash_details, "bank_account_details": bank_account_details, "external_details": external_details, "wallet_details": wallet_details, "buy_now_pay_later_details": buy_now_pay_later_details, "square_account_details": square_account_details, "location_id": location_id, "order_id": order_id, "reference_id": reference_id, "customer_id": customer_id, "employee_id": employee_id, "team_member_id": team_member_id, "refund_ids": refund_ids, "risk_evaluation": risk_evaluation, "terminal_checkout_id": terminal_checkout_id, "buyer_email_address": buyer_email_address, "billing_address": billing_address, "shipping_address": shipping_address, "note": note, "statement_description_identifier": statement_description_identifier, "capabilities": capabilities, "receipt_number": receipt_number, "receipt_url": receipt_url, "device_details": device_details, "application_details": application_details, "is_offline_payment": is_offline_payment, "offline_payment_details": offline_payment_details, "version_token": version_token }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Payment
    #
    # @param json_object [String] 
    # @return [square.rb::Payment]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      created_at = parsed_json["created_at"]
      updated_at = parsed_json["updated_at"]
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = square.rb::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      unless parsed_json["tip_money"].nil?
        tip_money = parsed_json["tip_money"].to_json
        tip_money = square.rb::Money.from_json(json_object: tip_money)
      else
        tip_money = nil
      end
      unless parsed_json["total_money"].nil?
        total_money = parsed_json["total_money"].to_json
        total_money = square.rb::Money.from_json(json_object: total_money)
      else
        total_money = nil
      end
      unless parsed_json["app_fee_money"].nil?
        app_fee_money = parsed_json["app_fee_money"].to_json
        app_fee_money = square.rb::Money.from_json(json_object: app_fee_money)
      else
        app_fee_money = nil
      end
      unless parsed_json["approved_money"].nil?
        approved_money = parsed_json["approved_money"].to_json
        approved_money = square.rb::Money.from_json(json_object: approved_money)
      else
        approved_money = nil
      end
      processing_fee = parsed_json["processing_fee"]&.map do | item |
  item = item.to_json
  square.rb::ProcessingFee.from_json(json_object: item)
end
      unless parsed_json["refunded_money"].nil?
        refunded_money = parsed_json["refunded_money"].to_json
        refunded_money = square.rb::Money.from_json(json_object: refunded_money)
      else
        refunded_money = nil
      end
      status = parsed_json["status"]
      delay_duration = parsed_json["delay_duration"]
      delay_action = parsed_json["delay_action"]
      delayed_until = parsed_json["delayed_until"]
      source_type = parsed_json["source_type"]
      unless parsed_json["card_details"].nil?
        card_details = parsed_json["card_details"].to_json
        card_details = square.rb::CardPaymentDetails.from_json(json_object: card_details)
      else
        card_details = nil
      end
      unless parsed_json["cash_details"].nil?
        cash_details = parsed_json["cash_details"].to_json
        cash_details = square.rb::CashPaymentDetails.from_json(json_object: cash_details)
      else
        cash_details = nil
      end
      unless parsed_json["bank_account_details"].nil?
        bank_account_details = parsed_json["bank_account_details"].to_json
        bank_account_details = square.rb::BankAccountPaymentDetails.from_json(json_object: bank_account_details)
      else
        bank_account_details = nil
      end
      unless parsed_json["external_details"].nil?
        external_details = parsed_json["external_details"].to_json
        external_details = square.rb::ExternalPaymentDetails.from_json(json_object: external_details)
      else
        external_details = nil
      end
      unless parsed_json["wallet_details"].nil?
        wallet_details = parsed_json["wallet_details"].to_json
        wallet_details = square.rb::DigitalWalletDetails.from_json(json_object: wallet_details)
      else
        wallet_details = nil
      end
      unless parsed_json["buy_now_pay_later_details"].nil?
        buy_now_pay_later_details = parsed_json["buy_now_pay_later_details"].to_json
        buy_now_pay_later_details = square.rb::BuyNowPayLaterDetails.from_json(json_object: buy_now_pay_later_details)
      else
        buy_now_pay_later_details = nil
      end
      unless parsed_json["square_account_details"].nil?
        square_account_details = parsed_json["square_account_details"].to_json
        square_account_details = square.rb::SquareAccountDetails.from_json(json_object: square_account_details)
      else
        square_account_details = nil
      end
      location_id = parsed_json["location_id"]
      order_id = parsed_json["order_id"]
      reference_id = parsed_json["reference_id"]
      customer_id = parsed_json["customer_id"]
      employee_id = parsed_json["employee_id"]
      team_member_id = parsed_json["team_member_id"]
      refund_ids = parsed_json["refund_ids"]
      unless parsed_json["risk_evaluation"].nil?
        risk_evaluation = parsed_json["risk_evaluation"].to_json
        risk_evaluation = square.rb::RiskEvaluation.from_json(json_object: risk_evaluation)
      else
        risk_evaluation = nil
      end
      terminal_checkout_id = parsed_json["terminal_checkout_id"]
      buyer_email_address = parsed_json["buyer_email_address"]
      unless parsed_json["billing_address"].nil?
        billing_address = parsed_json["billing_address"].to_json
        billing_address = square.rb::Address.from_json(json_object: billing_address)
      else
        billing_address = nil
      end
      unless parsed_json["shipping_address"].nil?
        shipping_address = parsed_json["shipping_address"].to_json
        shipping_address = square.rb::Address.from_json(json_object: shipping_address)
      else
        shipping_address = nil
      end
      note = parsed_json["note"]
      statement_description_identifier = parsed_json["statement_description_identifier"]
      capabilities = parsed_json["capabilities"]
      receipt_number = parsed_json["receipt_number"]
      receipt_url = parsed_json["receipt_url"]
      unless parsed_json["device_details"].nil?
        device_details = parsed_json["device_details"].to_json
        device_details = square.rb::DeviceDetails.from_json(json_object: device_details)
      else
        device_details = nil
      end
      unless parsed_json["application_details"].nil?
        application_details = parsed_json["application_details"].to_json
        application_details = square.rb::ApplicationDetails.from_json(json_object: application_details)
      else
        application_details = nil
      end
      is_offline_payment = parsed_json["is_offline_payment"]
      unless parsed_json["offline_payment_details"].nil?
        offline_payment_details = parsed_json["offline_payment_details"].to_json
        offline_payment_details = square.rb::OfflinePaymentDetails.from_json(json_object: offline_payment_details)
      else
        offline_payment_details = nil
      end
      version_token = parsed_json["version_token"]
      new(
        id: id,
        created_at: created_at,
        updated_at: updated_at,
        amount_money: amount_money,
        tip_money: tip_money,
        total_money: total_money,
        app_fee_money: app_fee_money,
        approved_money: approved_money,
        processing_fee: processing_fee,
        refunded_money: refunded_money,
        status: status,
        delay_duration: delay_duration,
        delay_action: delay_action,
        delayed_until: delayed_until,
        source_type: source_type,
        card_details: card_details,
        cash_details: cash_details,
        bank_account_details: bank_account_details,
        external_details: external_details,
        wallet_details: wallet_details,
        buy_now_pay_later_details: buy_now_pay_later_details,
        square_account_details: square_account_details,
        location_id: location_id,
        order_id: order_id,
        reference_id: reference_id,
        customer_id: customer_id,
        employee_id: employee_id,
        team_member_id: team_member_id,
        refund_ids: refund_ids,
        risk_evaluation: risk_evaluation,
        terminal_checkout_id: terminal_checkout_id,
        buyer_email_address: buyer_email_address,
        billing_address: billing_address,
        shipping_address: shipping_address,
        note: note,
        statement_description_identifier: statement_description_identifier,
        capabilities: capabilities,
        receipt_number: receipt_number,
        receipt_url: receipt_url,
        device_details: device_details,
        application_details: application_details,
        is_offline_payment: is_offline_payment,
        offline_payment_details: offline_payment_details,
        version_token: version_token,
        additional_properties: struct
      )
    end
# Serialize an instance of Payment to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.updated_at&.is_a?(String) != false || raise("Passed value for field obj.updated_at is not the expected type, validation failed.")
      obj.amount_money.nil? || square.rb::Money.validate_raw(obj: obj.amount_money)
      obj.tip_money.nil? || square.rb::Money.validate_raw(obj: obj.tip_money)
      obj.total_money.nil? || square.rb::Money.validate_raw(obj: obj.total_money)
      obj.app_fee_money.nil? || square.rb::Money.validate_raw(obj: obj.app_fee_money)
      obj.approved_money.nil? || square.rb::Money.validate_raw(obj: obj.approved_money)
      obj.processing_fee&.is_a?(Array) != false || raise("Passed value for field obj.processing_fee is not the expected type, validation failed.")
      obj.refunded_money.nil? || square.rb::Money.validate_raw(obj: obj.refunded_money)
      obj.status&.is_a?(String) != false || raise("Passed value for field obj.status is not the expected type, validation failed.")
      obj.delay_duration&.is_a?(String) != false || raise("Passed value for field obj.delay_duration is not the expected type, validation failed.")
      obj.delay_action&.is_a?(String) != false || raise("Passed value for field obj.delay_action is not the expected type, validation failed.")
      obj.delayed_until&.is_a?(String) != false || raise("Passed value for field obj.delayed_until is not the expected type, validation failed.")
      obj.source_type&.is_a?(String) != false || raise("Passed value for field obj.source_type is not the expected type, validation failed.")
      obj.card_details.nil? || square.rb::CardPaymentDetails.validate_raw(obj: obj.card_details)
      obj.cash_details.nil? || square.rb::CashPaymentDetails.validate_raw(obj: obj.cash_details)
      obj.bank_account_details.nil? || square.rb::BankAccountPaymentDetails.validate_raw(obj: obj.bank_account_details)
      obj.external_details.nil? || square.rb::ExternalPaymentDetails.validate_raw(obj: obj.external_details)
      obj.wallet_details.nil? || square.rb::DigitalWalletDetails.validate_raw(obj: obj.wallet_details)
      obj.buy_now_pay_later_details.nil? || square.rb::BuyNowPayLaterDetails.validate_raw(obj: obj.buy_now_pay_later_details)
      obj.square_account_details.nil? || square.rb::SquareAccountDetails.validate_raw(obj: obj.square_account_details)
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
      obj.order_id&.is_a?(String) != false || raise("Passed value for field obj.order_id is not the expected type, validation failed.")
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
      obj.customer_id&.is_a?(String) != false || raise("Passed value for field obj.customer_id is not the expected type, validation failed.")
      obj.employee_id&.is_a?(String) != false || raise("Passed value for field obj.employee_id is not the expected type, validation failed.")
      obj.team_member_id&.is_a?(String) != false || raise("Passed value for field obj.team_member_id is not the expected type, validation failed.")
      obj.refund_ids&.is_a?(Array) != false || raise("Passed value for field obj.refund_ids is not the expected type, validation failed.")
      obj.risk_evaluation.nil? || square.rb::RiskEvaluation.validate_raw(obj: obj.risk_evaluation)
      obj.terminal_checkout_id&.is_a?(String) != false || raise("Passed value for field obj.terminal_checkout_id is not the expected type, validation failed.")
      obj.buyer_email_address&.is_a?(String) != false || raise("Passed value for field obj.buyer_email_address is not the expected type, validation failed.")
      obj.billing_address.nil? || square.rb::Address.validate_raw(obj: obj.billing_address)
      obj.shipping_address.nil? || square.rb::Address.validate_raw(obj: obj.shipping_address)
      obj.note&.is_a?(String) != false || raise("Passed value for field obj.note is not the expected type, validation failed.")
      obj.statement_description_identifier&.is_a?(String) != false || raise("Passed value for field obj.statement_description_identifier is not the expected type, validation failed.")
      obj.capabilities&.is_a?(Array) != false || raise("Passed value for field obj.capabilities is not the expected type, validation failed.")
      obj.receipt_number&.is_a?(String) != false || raise("Passed value for field obj.receipt_number is not the expected type, validation failed.")
      obj.receipt_url&.is_a?(String) != false || raise("Passed value for field obj.receipt_url is not the expected type, validation failed.")
      obj.device_details.nil? || square.rb::DeviceDetails.validate_raw(obj: obj.device_details)
      obj.application_details.nil? || square.rb::ApplicationDetails.validate_raw(obj: obj.application_details)
      obj.is_offline_payment&.is_a?(Boolean) != false || raise("Passed value for field obj.is_offline_payment is not the expected type, validation failed.")
      obj.offline_payment_details.nil? || square.rb::OfflinePaymentDetails.validate_raw(obj: obj.offline_payment_details)
      obj.version_token&.is_a?(String) != false || raise("Passed value for field obj.version_token is not the expected type, validation failed.")
    end
  end
end