# frozen_string_literal: true
require_relative "fulfillment_type"
require_relative "fulfillment_state"
require_relative "fulfillment_fulfillment_line_item_application"
require_relative "fulfillment_fulfillment_entry"
require_relative "fulfillment_pickup_details"
require_relative "fulfillment_shipment_details"
require_relative "fulfillment_delivery_details"
require "ostruct"
require "json"

module square.rb
# Contains details about how to fulfill this order.
#  Orders can only be created with at most one fulfillment using the API.
#  However, orders returned by the Orders API might contain multiple fulfillments
#  because sellers can create multiple fulfillments using Square products such as
#  Square Online.
  class Fulfillment
  # @return [String] A unique ID that identifies the fulfillment only within this order.
    attr_reader :uid
  # @return [square.rb::FulfillmentType] The type of the fulfillment.
#  See [FulfillmentType](#type-fulfillmenttype) for possible values
    attr_reader :type
  # @return [square.rb::FulfillmentState] The state of the fulfillment.
#  See [FulfillmentState](#type-fulfillmentstate) for possible values
    attr_reader :state
  # @return [square.rb::FulfillmentFulfillmentLineItemApplication] Describes what order line items this fulfillment applies to.
#  It can be `ALL` or `ENTRY_LIST` with a supplied list of fulfillment entries.
#  See
#  FulfillmentLineItemApplication](#type-fulfillmentfulfillmentlineitemapplication)
#  for possible values
    attr_reader :line_item_application
  # @return [Array<square.rb::FulfillmentFulfillmentEntry>] A list of entries pertaining to the fulfillment of an order. Each entry must
#  reference
#  a valid `uid` for an order line item in the `line_item_uid` field, as well as a
#  `quantity` to
#  fulfill.
#  Multiple entries can reference the same line item `uid`, as long as the total
#  quantity among
#  all fulfillment entries referencing a single line item does not exceed the
#  quantity of the
#  order's line item itself.
#  An order cannot be marked as `COMPLETED` before all fulfillments are
#  `COMPLETED`,
#  `CANCELED`, or `FAILED`. Fulfillments can be created and completed independently
#  before order completion.
    attr_reader :entries
  # @return [Hash{String => String}] Application-defined data attached to this fulfillment. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    attr_reader :metadata
  # @return [square.rb::FulfillmentPickupDetails] Contains details for a pickup fulfillment. These details are required when the
#  fulfillment
#  type is `PICKUP`.
    attr_reader :pickup_details
  # @return [square.rb::FulfillmentShipmentDetails] Contains details for a shipment fulfillment. These details are required when the
#  fulfillment type
#  is `SHIPMENT`.
#  A shipment fulfillment's relationship to fulfillment `state`:
#  `PROPOSED`: A shipment is requested.
#  `RESERVED`: Fulfillment in progress. Shipment processing.
#  `PREPARED`: Shipment packaged. Shipping label created.
#  `COMPLETED`: Package has been shipped.
#  `CANCELED`: Shipment has been canceled.
#  `FAILED`: Shipment has failed.
    attr_reader :shipment_details
  # @return [square.rb::FulfillmentDeliveryDetails] Describes delivery details of an order fulfillment.
    attr_reader :delivery_details
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param uid [String] A unique ID that identifies the fulfillment only within this order.
    # @param type [square.rb::FulfillmentType] The type of the fulfillment.
#  See [FulfillmentType](#type-fulfillmenttype) for possible values
    # @param state [square.rb::FulfillmentState] The state of the fulfillment.
#  See [FulfillmentState](#type-fulfillmentstate) for possible values
    # @param line_item_application [square.rb::FulfillmentFulfillmentLineItemApplication] Describes what order line items this fulfillment applies to.
#  It can be `ALL` or `ENTRY_LIST` with a supplied list of fulfillment entries.
#  See
#  FulfillmentLineItemApplication](#type-fulfillmentfulfillmentlineitemapplication)
#  for possible values
    # @param entries [Array<square.rb::FulfillmentFulfillmentEntry>] A list of entries pertaining to the fulfillment of an order. Each entry must
#  reference
#  a valid `uid` for an order line item in the `line_item_uid` field, as well as a
#  `quantity` to
#  fulfill.
#  Multiple entries can reference the same line item `uid`, as long as the total
#  quantity among
#  all fulfillment entries referencing a single line item does not exceed the
#  quantity of the
#  order's line item itself.
#  An order cannot be marked as `COMPLETED` before all fulfillments are
#  `COMPLETED`,
#  `CANCELED`, or `FAILED`. Fulfillments can be created and completed independently
#  before order completion.
    # @param metadata [Hash{String => String}] Application-defined data attached to this fulfillment. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    # @param pickup_details [square.rb::FulfillmentPickupDetails] Contains details for a pickup fulfillment. These details are required when the
#  fulfillment
#  type is `PICKUP`.
    # @param shipment_details [square.rb::FulfillmentShipmentDetails] Contains details for a shipment fulfillment. These details are required when the
#  fulfillment type
#  is `SHIPMENT`.
#  A shipment fulfillment's relationship to fulfillment `state`:
#  `PROPOSED`: A shipment is requested.
#  `RESERVED`: Fulfillment in progress. Shipment processing.
#  `PREPARED`: Shipment packaged. Shipping label created.
#  `COMPLETED`: Package has been shipped.
#  `CANCELED`: Shipment has been canceled.
#  `FAILED`: Shipment has failed.
    # @param delivery_details [square.rb::FulfillmentDeliveryDetails] Describes delivery details of an order fulfillment.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::Fulfillment]
    def initialize(uid: OMIT, type: OMIT, state: OMIT, line_item_application: OMIT, entries: OMIT, metadata: OMIT, pickup_details: OMIT, shipment_details: OMIT, delivery_details: OMIT, additional_properties: nil)
      @uid = uid if uid != OMIT
      @type = type if type != OMIT
      @state = state if state != OMIT
      @line_item_application = line_item_application if line_item_application != OMIT
      @entries = entries if entries != OMIT
      @metadata = metadata if metadata != OMIT
      @pickup_details = pickup_details if pickup_details != OMIT
      @shipment_details = shipment_details if shipment_details != OMIT
      @delivery_details = delivery_details if delivery_details != OMIT
      @additional_properties = additional_properties
      @_field_set = { "uid": uid, "type": type, "state": state, "line_item_application": line_item_application, "entries": entries, "metadata": metadata, "pickup_details": pickup_details, "shipment_details": shipment_details, "delivery_details": delivery_details }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Fulfillment
    #
    # @param json_object [String] 
    # @return [square.rb::Fulfillment]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      uid = parsed_json["uid"]
      type = parsed_json["type"]
      state = parsed_json["state"]
      line_item_application = parsed_json["line_item_application"]
      entries = parsed_json["entries"]&.map do | item |
  item = item.to_json
  square.rb::FulfillmentFulfillmentEntry.from_json(json_object: item)
end
      metadata = parsed_json["metadata"]
      unless parsed_json["pickup_details"].nil?
        pickup_details = parsed_json["pickup_details"].to_json
        pickup_details = square.rb::FulfillmentPickupDetails.from_json(json_object: pickup_details)
      else
        pickup_details = nil
      end
      unless parsed_json["shipment_details"].nil?
        shipment_details = parsed_json["shipment_details"].to_json
        shipment_details = square.rb::FulfillmentShipmentDetails.from_json(json_object: shipment_details)
      else
        shipment_details = nil
      end
      unless parsed_json["delivery_details"].nil?
        delivery_details = parsed_json["delivery_details"].to_json
        delivery_details = square.rb::FulfillmentDeliveryDetails.from_json(json_object: delivery_details)
      else
        delivery_details = nil
      end
      new(
        uid: uid,
        type: type,
        state: state,
        line_item_application: line_item_application,
        entries: entries,
        metadata: metadata,
        pickup_details: pickup_details,
        shipment_details: shipment_details,
        delivery_details: delivery_details,
        additional_properties: struct
      )
    end
# Serialize an instance of Fulfillment to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.uid&.is_a?(String) != false || raise("Passed value for field obj.uid is not the expected type, validation failed.")
      obj.type&.is_a?(square.rb::FulfillmentType) != false || raise("Passed value for field obj.type is not the expected type, validation failed.")
      obj.state&.is_a?(square.rb::FulfillmentState) != false || raise("Passed value for field obj.state is not the expected type, validation failed.")
      obj.line_item_application&.is_a?(square.rb::FulfillmentFulfillmentLineItemApplication) != false || raise("Passed value for field obj.line_item_application is not the expected type, validation failed.")
      obj.entries&.is_a?(Array) != false || raise("Passed value for field obj.entries is not the expected type, validation failed.")
      obj.metadata&.is_a?(Hash) != false || raise("Passed value for field obj.metadata is not the expected type, validation failed.")
      obj.pickup_details.nil? || square.rb::FulfillmentPickupDetails.validate_raw(obj: obj.pickup_details)
      obj.shipment_details.nil? || square.rb::FulfillmentShipmentDetails.validate_raw(obj: obj.shipment_details)
      obj.delivery_details.nil? || square.rb::FulfillmentDeliveryDetails.validate_raw(obj: obj.delivery_details)
    end
  end
end