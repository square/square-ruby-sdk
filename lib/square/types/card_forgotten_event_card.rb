# frozen_string_literal: true
require "ostruct"
require "json"

module square.rb
  class CardForgottenEventCard
  # @return [String] Unique ID for this card. Generated by Square.
    attr_reader :id
  # @return [String] The ID of a customer created using the Customers API associated with the card.
    attr_reader :customer_id
  # @return [Boolean] Indicates whether or not a card can be used for payments.
    attr_reader :enabled
  # @return [String] An optional user-defined reference ID that associates this card with
#  another entity in an external system. For example, a customer ID from an
#  external customer management system.
    attr_reader :reference_id
  # @return [Long] Current version number of the card. Increments with each card update. Requests
#  to update an
#  existing Card object will be rejected unless the version in the request matches
#  the current
#  version for the Card.
    attr_reader :version
  # @return [String] The ID of the merchant associated with the card.
    attr_reader :merchant_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] Unique ID for this card. Generated by Square.
    # @param customer_id [String] The ID of a customer created using the Customers API associated with the card.
    # @param enabled [Boolean] Indicates whether or not a card can be used for payments.
    # @param reference_id [String] An optional user-defined reference ID that associates this card with
#  another entity in an external system. For example, a customer ID from an
#  external customer management system.
    # @param version [Long] Current version number of the card. Increments with each card update. Requests
#  to update an
#  existing Card object will be rejected unless the version in the request matches
#  the current
#  version for the Card.
    # @param merchant_id [String] The ID of the merchant associated with the card.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::CardForgottenEventCard]
    def initialize(id: OMIT, customer_id: OMIT, enabled: OMIT, reference_id: OMIT, version: OMIT, merchant_id: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @customer_id = customer_id if customer_id != OMIT
      @enabled = enabled if enabled != OMIT
      @reference_id = reference_id if reference_id != OMIT
      @version = version if version != OMIT
      @merchant_id = merchant_id if merchant_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "customer_id": customer_id, "enabled": enabled, "reference_id": reference_id, "version": version, "merchant_id": merchant_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of CardForgottenEventCard
    #
    # @param json_object [String] 
    # @return [square.rb::CardForgottenEventCard]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      customer_id = parsed_json["customer_id"]
      enabled = parsed_json["enabled"]
      reference_id = parsed_json["reference_id"]
      version = parsed_json["version"]
      merchant_id = parsed_json["merchant_id"]
      new(
        id: id,
        customer_id: customer_id,
        enabled: enabled,
        reference_id: reference_id,
        version: version,
        merchant_id: merchant_id,
        additional_properties: struct
      )
    end
# Serialize an instance of CardForgottenEventCard to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.customer_id&.is_a?(String) != false || raise("Passed value for field obj.customer_id is not the expected type, validation failed.")
      obj.enabled&.is_a?(Boolean) != false || raise("Passed value for field obj.enabled is not the expected type, validation failed.")
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
      obj.version&.is_a?(Long) != false || raise("Passed value for field obj.version is not the expected type, validation failed.")
      obj.merchant_id&.is_a?(String) != false || raise("Passed value for field obj.merchant_id is not the expected type, validation failed.")
    end
  end
end