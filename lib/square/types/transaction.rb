# frozen_string_literal: true
require_relative "tender"
require_relative "refund"
require_relative "transaction_product"
require_relative "address"
require "ostruct"
require "json"

module square.rb
# Represents a transaction processed with Square, either with the
#  Connect API or with Square Point of Sale.
#  The `tenders` field of this object lists all methods of payment used to pay in
#  the transaction.
  class Transaction
  # @return [String] The transaction's unique ID, issued by Square payments servers.
    attr_reader :id
  # @return [String] The ID of the transaction's associated location.
    attr_reader :location_id
  # @return [String] The timestamp for when the transaction was created, in RFC 3339 format.
    attr_reader :created_at
  # @return [Array<square.rb::Tender>] The tenders used to pay in the transaction.
    attr_reader :tenders
  # @return [Array<square.rb::Refund>] Refunds that have been applied to any tender in the transaction.
    attr_reader :refunds
  # @return [String] If the transaction was created with the
#  [Charge](api-endpoint:Transactions-Charge)
#  endpoint, this value is the same as the value provided for the `reference_id`
#  parameter in the request to that endpoint. Otherwise, it is not set.
    attr_reader :reference_id
  # @return [square.rb::TransactionProduct] The Square product that processed the transaction.
#  See [TransactionProduct](#type-transactionproduct) for possible values
    attr_reader :product
  # @return [String] If the transaction was created in the Square Point of Sale app, this value
#  is the ID generated for the transaction by Square Point of Sale.
#  This ID has no relationship to the transaction's canonical `id`, which is
#  generated by Square's backend servers. This value is generated for bookkeeping
#  purposes, in case the transaction cannot immediately be completed (for example,
#  if the transaction is processed in offline mode).
#  It is not currently possible with the Connect API to perform a transaction
#  lookup by this value.
    attr_reader :client_id
  # @return [square.rb::Address] The shipping address provided in the request, if any.
    attr_reader :shipping_address
  # @return [String] The order_id is an identifier for the order associated with this transaction, if
#  any.
    attr_reader :order_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] The transaction's unique ID, issued by Square payments servers.
    # @param location_id [String] The ID of the transaction's associated location.
    # @param created_at [String] The timestamp for when the transaction was created, in RFC 3339 format.
    # @param tenders [Array<square.rb::Tender>] The tenders used to pay in the transaction.
    # @param refunds [Array<square.rb::Refund>] Refunds that have been applied to any tender in the transaction.
    # @param reference_id [String] If the transaction was created with the
#  [Charge](api-endpoint:Transactions-Charge)
#  endpoint, this value is the same as the value provided for the `reference_id`
#  parameter in the request to that endpoint. Otherwise, it is not set.
    # @param product [square.rb::TransactionProduct] The Square product that processed the transaction.
#  See [TransactionProduct](#type-transactionproduct) for possible values
    # @param client_id [String] If the transaction was created in the Square Point of Sale app, this value
#  is the ID generated for the transaction by Square Point of Sale.
#  This ID has no relationship to the transaction's canonical `id`, which is
#  generated by Square's backend servers. This value is generated for bookkeeping
#  purposes, in case the transaction cannot immediately be completed (for example,
#  if the transaction is processed in offline mode).
#  It is not currently possible with the Connect API to perform a transaction
#  lookup by this value.
    # @param shipping_address [square.rb::Address] The shipping address provided in the request, if any.
    # @param order_id [String] The order_id is an identifier for the order associated with this transaction, if
#  any.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [square.rb::Transaction]
    def initialize(id: OMIT, location_id: OMIT, created_at: OMIT, tenders: OMIT, refunds: OMIT, reference_id: OMIT, product: OMIT, client_id: OMIT, shipping_address: OMIT, order_id: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @location_id = location_id if location_id != OMIT
      @created_at = created_at if created_at != OMIT
      @tenders = tenders if tenders != OMIT
      @refunds = refunds if refunds != OMIT
      @reference_id = reference_id if reference_id != OMIT
      @product = product if product != OMIT
      @client_id = client_id if client_id != OMIT
      @shipping_address = shipping_address if shipping_address != OMIT
      @order_id = order_id if order_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "location_id": location_id, "created_at": created_at, "tenders": tenders, "refunds": refunds, "reference_id": reference_id, "product": product, "client_id": client_id, "shipping_address": shipping_address, "order_id": order_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Transaction
    #
    # @param json_object [String] 
    # @return [square.rb::Transaction]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      location_id = parsed_json["location_id"]
      created_at = parsed_json["created_at"]
      tenders = parsed_json["tenders"]&.map do | item |
  item = item.to_json
  square.rb::Tender.from_json(json_object: item)
end
      refunds = parsed_json["refunds"]&.map do | item |
  item = item.to_json
  square.rb::Refund.from_json(json_object: item)
end
      reference_id = parsed_json["reference_id"]
      product = parsed_json["product"]
      client_id = parsed_json["client_id"]
      unless parsed_json["shipping_address"].nil?
        shipping_address = parsed_json["shipping_address"].to_json
        shipping_address = square.rb::Address.from_json(json_object: shipping_address)
      else
        shipping_address = nil
      end
      order_id = parsed_json["order_id"]
      new(
        id: id,
        location_id: location_id,
        created_at: created_at,
        tenders: tenders,
        refunds: refunds,
        reference_id: reference_id,
        product: product,
        client_id: client_id,
        shipping_address: shipping_address,
        order_id: order_id,
        additional_properties: struct
      )
    end
# Serialize an instance of Transaction to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.tenders&.is_a?(Array) != false || raise("Passed value for field obj.tenders is not the expected type, validation failed.")
      obj.refunds&.is_a?(Array) != false || raise("Passed value for field obj.refunds is not the expected type, validation failed.")
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
      obj.product&.is_a?(square.rb::TransactionProduct) != false || raise("Passed value for field obj.product is not the expected type, validation failed.")
      obj.client_id&.is_a?(String) != false || raise("Passed value for field obj.client_id is not the expected type, validation failed.")
      obj.shipping_address.nil? || square.rb::Address.validate_raw(obj: obj.shipping_address)
      obj.order_id&.is_a?(String) != false || raise("Passed value for field obj.order_id is not the expected type, validation failed.")
    end
  end
end