# frozen_string_literal: true
require_relative "../../../requests"
require_relative "../../types/address"
require_relative "../../types/create_customer_card_response"
require_relative "../../types/delete_customer_card_response"
require "async"
require "async"
require_relative "../../../requests"

module square.rb
  module Customers
    class CardsClient
    # @return [square.rb::RequestClient] 
      attr_reader :request_client


      # @param request_client [square.rb::RequestClient] 
      # @return [square.rb::Customers::CardsClient]
      def initialize(request_client:)
        @request_client = request_client
      end
# Adds a card on file to an existing customer.
#  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
#  calls with the same card nonce return the same card record that was created
#  with the provided nonce during the _first_ call.
      #
      # @param customer_id [String] The Square ID of the customer profile the card is linked to.
      # @param card_nonce [String] A card nonce representing the credit card to link to the customer.
#  Card nonces are generated by the Square payment form when customers enter
#  their card information. For more information, see
#  [Walkthrough: Integrate Square Payments in a
#  Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
#  __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
#  cannot be used to create a customer card.
      # @param billing_address [Hash] Address information for the card on file.
#  __NOTE:__ If a billing address is provided in the request, the
#  `CreateCustomerCardRequest.billing_address.postal_code` must match
#  the postal code encoded in the card nonce.Request of type square.rb::Address, as a Hash
      #   * :address_line_1 (String) 
      #   * :address_line_2 (String) 
      #   * :address_line_3 (String) 
      #   * :locality (String) 
      #   * :sublocality (String) 
      #   * :sublocality_2 (String) 
      #   * :sublocality_3 (String) 
      #   * :administrative_district_level_1 (String) 
      #   * :administrative_district_level_2 (String) 
      #   * :administrative_district_level_3 (String) 
      #   * :postal_code (String) 
      #   * :country (square.rb::Country) 
      #   * :first_name (String) 
      #   * :last_name (String) 
      # @param cardholder_name [String] The full name printed on the credit card.
      # @param verification_token [String] An identifying token generated by
#  squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
#  Verification tokens encapsulate customer device information and 3-D Secure
#  challenge results to indicate that Square has verified the buyer identity.
      # @param request_options [square.rb::RequestOptions] 
      # @return [square.rb::CreateCustomerCardResponse]
      # @example
#  api = square.rb::Client.new(
#    base_url: "https://api.example.com",
#    environment: square.rb::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.customers.cards.create(
#    customer_id: "customer_id",
#    card_nonce: "YOUR_CARD_NONCE",
#    billing_address: { address_line_1: "500 Electric Ave", address_line_2: "Suite 600", locality: "New York", administrative_district_level_1: "NY", postal_code: "10003", country: US },
#    cardholder_name: "Amelia Earhart"
#  )
      def create(customer_id:, card_nonce:, billing_address: nil, cardholder_name: nil, verification_token: nil, request_options: nil)
        response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  req.body = { **(request_options&.additional_body_parameters || {}), card_nonce: card_nonce, billing_address: billing_address, cardholder_name: cardholder_name, verification_token: verification_token }.compact
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/customers/#{customer_id}/cards"
end
        square.rb::CreateCustomerCardResponse.from_json(json_object: response.body)
      end
# Removes a card on file from a customer.
      #
      # @param customer_id [String] The ID of the customer that the card on file belongs to.
      # @param card_id [String] The ID of the card on file to delete.
      # @param request_options [square.rb::RequestOptions] 
      # @return [square.rb::DeleteCustomerCardResponse]
      # @example
#  api = square.rb::Client.new(
#    base_url: "https://api.example.com",
#    environment: square.rb::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.customers.cards.delete(customer_id: "customer_id", card_id: "card_id")
      def delete(customer_id:, card_id:, request_options: nil)
        response = @request_client.conn.delete do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/customers/#{customer_id}/cards/#{card_id}"
end
        square.rb::DeleteCustomerCardResponse.from_json(json_object: response.body)
      end
    end
    class AsyncCardsClient
    # @return [square.rb::AsyncRequestClient] 
      attr_reader :request_client


      # @param request_client [square.rb::RequestClient] 
      # @return [square.rb::Customers::AsyncCardsClient]
      def initialize(request_client:)
        @request_client = request_client
      end
# Adds a card on file to an existing customer.
#  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
#  calls with the same card nonce return the same card record that was created
#  with the provided nonce during the _first_ call.
      #
      # @param customer_id [String] The Square ID of the customer profile the card is linked to.
      # @param card_nonce [String] A card nonce representing the credit card to link to the customer.
#  Card nonces are generated by the Square payment form when customers enter
#  their card information. For more information, see
#  [Walkthrough: Integrate Square Payments in a
#  Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
#  __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
#  cannot be used to create a customer card.
      # @param billing_address [Hash] Address information for the card on file.
#  __NOTE:__ If a billing address is provided in the request, the
#  `CreateCustomerCardRequest.billing_address.postal_code` must match
#  the postal code encoded in the card nonce.Request of type square.rb::Address, as a Hash
      #   * :address_line_1 (String) 
      #   * :address_line_2 (String) 
      #   * :address_line_3 (String) 
      #   * :locality (String) 
      #   * :sublocality (String) 
      #   * :sublocality_2 (String) 
      #   * :sublocality_3 (String) 
      #   * :administrative_district_level_1 (String) 
      #   * :administrative_district_level_2 (String) 
      #   * :administrative_district_level_3 (String) 
      #   * :postal_code (String) 
      #   * :country (square.rb::Country) 
      #   * :first_name (String) 
      #   * :last_name (String) 
      # @param cardholder_name [String] The full name printed on the credit card.
      # @param verification_token [String] An identifying token generated by
#  squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
#  Verification tokens encapsulate customer device information and 3-D Secure
#  challenge results to indicate that Square has verified the buyer identity.
      # @param request_options [square.rb::RequestOptions] 
      # @return [square.rb::CreateCustomerCardResponse]
      # @example
#  api = square.rb::Client.new(
#    base_url: "https://api.example.com",
#    environment: square.rb::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.customers.cards.create(
#    customer_id: "customer_id",
#    card_nonce: "YOUR_CARD_NONCE",
#    billing_address: { address_line_1: "500 Electric Ave", address_line_2: "Suite 600", locality: "New York", administrative_district_level_1: "NY", postal_code: "10003", country: US },
#    cardholder_name: "Amelia Earhart"
#  )
      def create(customer_id:, card_nonce:, billing_address: nil, cardholder_name: nil, verification_token: nil, request_options: nil)
        Async do
          response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  req.body = { **(request_options&.additional_body_parameters || {}), card_nonce: card_nonce, billing_address: billing_address, cardholder_name: cardholder_name, verification_token: verification_token }.compact
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/customers/#{customer_id}/cards"
end
          square.rb::CreateCustomerCardResponse.from_json(json_object: response.body)
        end
      end
# Removes a card on file from a customer.
      #
      # @param customer_id [String] The ID of the customer that the card on file belongs to.
      # @param card_id [String] The ID of the card on file to delete.
      # @param request_options [square.rb::RequestOptions] 
      # @return [square.rb::DeleteCustomerCardResponse]
      # @example
#  api = square.rb::Client.new(
#    base_url: "https://api.example.com",
#    environment: square.rb::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.customers.cards.delete(customer_id: "customer_id", card_id: "card_id")
      def delete(customer_id:, card_id:, request_options: nil)
        Async do
          response = @request_client.conn.delete do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/customers/#{customer_id}/cards/#{card_id}"
end
          square.rb::DeleteCustomerCardResponse.from_json(json_object: response.body)
        end
      end
    end
  end
end