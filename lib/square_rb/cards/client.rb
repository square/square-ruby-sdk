# frozen_string_literal: true
require_relative "../../requests"
require_relative "../types/sort_order"
require_relative "../types/list_cards_response"
require_relative "../types/card"
require_relative "../types/create_card_response"
require_relative "../types/get_card_response"
require_relative "../types/disable_card_response"
require "async"
require "async"
require "async"
require "async"
require_relative "../../requests"

module SquareApiClient
  class CardsClient
  # @return [SquareApiClient::RequestClient] 
    attr_reader :request_client


    # @param request_client [SquareApiClient::RequestClient] 
    # @return [SquareApiClient::CardsClient]
    def initialize(request_client:)
      @request_client = request_client
    end
# Retrieves a list of cards owned by the account making the request.
#  A max of 25 cards will be returned.
    #
    # @param cursor [String] A pagination cursor returned by a previous call to this endpoint.
#  Provide this to retrieve the next set of results for your original query.
#  See
#  https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination)
#  for more information.
    # @param customer_id [String] Limit results to cards associated with the customer supplied.
#  By default, all cards owned by the merchant are returned.
    # @param include_disabled [Boolean] Includes disabled cards.
#  By default, all enabled cards owned by the merchant are returned.
    # @param reference_id [String] Limit results to cards associated with the reference_id supplied.
    # @param sort_order [SquareApiClient::SortOrder] Sorts the returned list by when the card was created with the specified order.
#  This field defaults to ASC.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::ListCardsResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.list
    def list(cursor: nil, customer_id: nil, include_disabled: nil, reference_id: nil, sort_order: nil, request_options: nil)
      response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  req.params = { **(request_options&.additional_query_parameters || {}), "cursor": cursor, "customer_id": customer_id, "include_disabled": include_disabled, "reference_id": reference_id, "sort_order": sort_order }.compact
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards"
end
      SquareApiClient::ListCardsResponse.from_json(json_object: response.body)
    end
# Adds a card on file to an existing merchant.
    #
    # @param idempotency_key [String] A unique string that identifies this CreateCard request. Keys can be
#  any valid string and must be unique for every request.
#  Max: 45 characters
#  See [Idempotency
#  ttps://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
#  for more information.
    # @param source_id [String] The ID of the source which represents the card information to be stored. This
#  can be a card nonce or a payment id.
    # @param verification_token [String] An identifying token generated by
#  squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
#  Verification tokens encapsulate customer device information and 3-D Secure
#  challenge results to indicate that Square has verified the buyer identity.
#  See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    # @param card [Hash] Payment details associated with the card to be stored.Request of type SquareApiClient::Card, as a Hash
    #   * :id (String) 
    #   * :card_brand (SquareApiClient::CardBrand) 
    #   * :last_4 (String) 
    #   * :exp_month (Long) 
    #   * :exp_year (Long) 
    #   * :cardholder_name (String) 
    #   * :billing_address (Hash)
    #     * :address_line_1 (String) 
    #     * :address_line_2 (String) 
    #     * :address_line_3 (String) 
    #     * :locality (String) 
    #     * :sublocality (String) 
    #     * :sublocality_2 (String) 
    #     * :sublocality_3 (String) 
    #     * :administrative_district_level_1 (String) 
    #     * :administrative_district_level_2 (String) 
    #     * :administrative_district_level_3 (String) 
    #     * :postal_code (String) 
    #     * :country (SquareApiClient::Country) 
    #     * :first_name (String) 
    #     * :last_name (String) 
    #   * :fingerprint (String) 
    #   * :customer_id (String) 
    #   * :merchant_id (String) 
    #   * :reference_id (String) 
    #   * :enabled (Boolean) 
    #   * :card_type (SquareApiClient::CardType) 
    #   * :prepaid_type (SquareApiClient::CardPrepaidType) 
    #   * :bin (String) 
    #   * :version (Long) 
    #   * :card_co_brand (SquareApiClient::CardCoBrand) 
    #   * :issuer_alert (SquareApiClient::CARD_ISSUER_ALERT) 
    #   * :issuer_alert_at (String) 
    #   * :hsa_fsa (Boolean) 
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::CreateCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.create(
#    idempotency_key: "4935a656-a929-4792-b97c-8848be85c27c",
#    source_id: "cnon:uIbfJXhXETSP197M3GB",
#    card: { cardholder_name: "Amelia Earhart", billing_address: { address_line_1: "500 Electric Ave", address_line_2: "Suite 600", locality: "New York", administrative_district_level_1: "NY", postal_code: "10003", country: US }, customer_id: "VDKXEEKPJN48QDG3BGGFAK05P8", reference_id: "user-id-1" }
#  )
    def create(idempotency_key:, source_id:, verification_token: nil, card:, request_options: nil)
      response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  req.body = { **(request_options&.additional_body_parameters || {}), idempotency_key: idempotency_key, source_id: source_id, verification_token: verification_token, card: card }.compact
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards"
end
      SquareApiClient::CreateCardResponse.from_json(json_object: response.body)
    end
# Retrieves details for a specific Card.
    #
    # @param card_id [String] Unique ID for the desired Card.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::GetCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.get(card_id: "card_id")
    def get(card_id:, request_options: nil)
      response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards/#{card_id}"
end
      SquareApiClient::GetCardResponse.from_json(json_object: response.body)
    end
# Disables the card, preventing any further updates or charges.
#  Disabling an already disabled card is allowed but has no effect.
    #
    # @param card_id [String] Unique ID for the desired Card.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::DisableCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.disable(card_id: "card_id")
    def disable(card_id:, request_options: nil)
      response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards/#{card_id}/disable"
end
      SquareApiClient::DisableCardResponse.from_json(json_object: response.body)
    end
  end
  class AsyncCardsClient
  # @return [SquareApiClient::AsyncRequestClient] 
    attr_reader :request_client


    # @param request_client [SquareApiClient::RequestClient] 
    # @return [SquareApiClient::AsyncCardsClient]
    def initialize(request_client:)
      @request_client = request_client
    end
# Retrieves a list of cards owned by the account making the request.
#  A max of 25 cards will be returned.
    #
    # @param cursor [String] A pagination cursor returned by a previous call to this endpoint.
#  Provide this to retrieve the next set of results for your original query.
#  See
#  https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination)
#  for more information.
    # @param customer_id [String] Limit results to cards associated with the customer supplied.
#  By default, all cards owned by the merchant are returned.
    # @param include_disabled [Boolean] Includes disabled cards.
#  By default, all enabled cards owned by the merchant are returned.
    # @param reference_id [String] Limit results to cards associated with the reference_id supplied.
    # @param sort_order [SquareApiClient::SortOrder] Sorts the returned list by when the card was created with the specified order.
#  This field defaults to ASC.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::ListCardsResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.list
    def list(cursor: nil, customer_id: nil, include_disabled: nil, reference_id: nil, sort_order: nil, request_options: nil)
      Async do
        response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  req.params = { **(request_options&.additional_query_parameters || {}), "cursor": cursor, "customer_id": customer_id, "include_disabled": include_disabled, "reference_id": reference_id, "sort_order": sort_order }.compact
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards"
end
        SquareApiClient::ListCardsResponse.from_json(json_object: response.body)
      end
    end
# Adds a card on file to an existing merchant.
    #
    # @param idempotency_key [String] A unique string that identifies this CreateCard request. Keys can be
#  any valid string and must be unique for every request.
#  Max: 45 characters
#  See [Idempotency
#  ttps://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency)
#  for more information.
    # @param source_id [String] The ID of the source which represents the card information to be stored. This
#  can be a card nonce or a payment id.
    # @param verification_token [String] An identifying token generated by
#  squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
#  Verification tokens encapsulate customer device information and 3-D Secure
#  challenge results to indicate that Square has verified the buyer identity.
#  See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    # @param card [Hash] Payment details associated with the card to be stored.Request of type SquareApiClient::Card, as a Hash
    #   * :id (String) 
    #   * :card_brand (SquareApiClient::CardBrand) 
    #   * :last_4 (String) 
    #   * :exp_month (Long) 
    #   * :exp_year (Long) 
    #   * :cardholder_name (String) 
    #   * :billing_address (Hash)
    #     * :address_line_1 (String) 
    #     * :address_line_2 (String) 
    #     * :address_line_3 (String) 
    #     * :locality (String) 
    #     * :sublocality (String) 
    #     * :sublocality_2 (String) 
    #     * :sublocality_3 (String) 
    #     * :administrative_district_level_1 (String) 
    #     * :administrative_district_level_2 (String) 
    #     * :administrative_district_level_3 (String) 
    #     * :postal_code (String) 
    #     * :country (SquareApiClient::Country) 
    #     * :first_name (String) 
    #     * :last_name (String) 
    #   * :fingerprint (String) 
    #   * :customer_id (String) 
    #   * :merchant_id (String) 
    #   * :reference_id (String) 
    #   * :enabled (Boolean) 
    #   * :card_type (SquareApiClient::CardType) 
    #   * :prepaid_type (SquareApiClient::CardPrepaidType) 
    #   * :bin (String) 
    #   * :version (Long) 
    #   * :card_co_brand (SquareApiClient::CardCoBrand) 
    #   * :issuer_alert (SquareApiClient::CARD_ISSUER_ALERT) 
    #   * :issuer_alert_at (String) 
    #   * :hsa_fsa (Boolean) 
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::CreateCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.create(
#    idempotency_key: "4935a656-a929-4792-b97c-8848be85c27c",
#    source_id: "cnon:uIbfJXhXETSP197M3GB",
#    card: { cardholder_name: "Amelia Earhart", billing_address: { address_line_1: "500 Electric Ave", address_line_2: "Suite 600", locality: "New York", administrative_district_level_1: "NY", postal_code: "10003", country: US }, customer_id: "VDKXEEKPJN48QDG3BGGFAK05P8", reference_id: "user-id-1" }
#  )
    def create(idempotency_key:, source_id:, verification_token: nil, card:, request_options: nil)
      Async do
        response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  req.body = { **(request_options&.additional_body_parameters || {}), idempotency_key: idempotency_key, source_id: source_id, verification_token: verification_token, card: card }.compact
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards"
end
        SquareApiClient::CreateCardResponse.from_json(json_object: response.body)
      end
    end
# Retrieves details for a specific Card.
    #
    # @param card_id [String] Unique ID for the desired Card.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::GetCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.get(card_id: "card_id")
    def get(card_id:, request_options: nil)
      Async do
        response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards/#{card_id}"
end
        SquareApiClient::GetCardResponse.from_json(json_object: response.body)
      end
    end
# Disables the card, preventing any further updates or charges.
#  Disabling an already disabled card is allowed but has no effect.
    #
    # @param card_id [String] Unique ID for the desired Card.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::DisableCardResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.cards.disable(card_id: "card_id")
    def disable(card_id:, request_options: nil)
      Async do
        response = @request_client.conn.post do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/cards/#{card_id}/disable"
end
        SquareApiClient::DisableCardResponse.from_json(json_object: response.body)
      end
    end
  end
end