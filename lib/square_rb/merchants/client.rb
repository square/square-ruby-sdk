# frozen_string_literal: true
require_relative "../../requests"
require_relative "custom_attribute_definitions/client"
require_relative "custom_attributes/client"
require_relative "../types/list_merchants_response"
require_relative "../types/get_merchant_response"
require "async"
require "async"
require_relative "../../requests"

module SquareApiClient
  class MerchantsClient
  # @return [SquareApiClient::RequestClient] 
    attr_reader :request_client
  # @return [SquareApiClient::Merchants::CustomAttributeDefinitionsClient] 
    attr_reader :custom_attribute_definitions
  # @return [SquareApiClient::Merchants::CustomAttributesClient] 
    attr_reader :custom_attributes


    # @param request_client [SquareApiClient::RequestClient] 
    # @return [SquareApiClient::MerchantsClient]
    def initialize(request_client:)
      @request_client = request_client
      @custom_attribute_definitions = SquareApiClient::Merchants::CustomAttributeDefinitionsClient.new(request_client: request_client)
      @custom_attributes = SquareApiClient::Merchants::CustomAttributesClient.new(request_client: request_client)
    end
# Provides details about the merchant associated with a given access token.
#  The access token used to connect your application to a Square seller is
#  associated
#  with a single merchant. That means that `ListMerchants` returns a list
#  with a single `Merchant` object. You can specify your personal access token
#  to get your own merchant information or specify an OAuth token to get the
#  information for the merchant that granted your application access.
#  If you know the merchant ID, you can also use the
#  [RetrieveMerchant](api-endpoint:Merchants-RetrieveMerchant)
#  endpoint to retrieve the merchant information.
    #
    # @param cursor [Integer] The cursor generated by the previous response.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::ListMerchantsResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.merchants.list
    def list(cursor: nil, request_options: nil)
      response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  req.params = { **(request_options&.additional_query_parameters || {}), "cursor": cursor }.compact
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/merchants"
end
      SquareApiClient::ListMerchantsResponse.from_json(json_object: response.body)
    end
# Retrieves the `Merchant` object for the given `merchant_id`.
    #
    # @param merchant_id [String] The ID of the merchant to retrieve. If the string "me" is supplied as the ID,
#  then retrieve the merchant that is currently accessible to this call.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::GetMerchantResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.merchants.get(merchant_id: "merchant_id")
    def get(merchant_id:, request_options: nil)
      response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/merchants/#{merchant_id}"
end
      SquareApiClient::GetMerchantResponse.from_json(json_object: response.body)
    end
  end
  class AsyncMerchantsClient
  # @return [SquareApiClient::AsyncRequestClient] 
    attr_reader :request_client
  # @return [SquareApiClient::Merchants::CustomAttributeDefinitionsClient] 
    attr_reader :custom_attribute_definitions
  # @return [SquareApiClient::Merchants::CustomAttributesClient] 
    attr_reader :custom_attributes


    # @param request_client [SquareApiClient::RequestClient] 
    # @return [SquareApiClient::AsyncMerchantsClient]
    def initialize(request_client:)
      @request_client = request_client
      @custom_attribute_definitions = SquareApiClient::Merchants::AsyncCustomAttributeDefinitionsClient.new(request_client: request_client)
      @custom_attributes = SquareApiClient::Merchants::AsyncCustomAttributesClient.new(request_client: request_client)
    end
# Provides details about the merchant associated with a given access token.
#  The access token used to connect your application to a Square seller is
#  associated
#  with a single merchant. That means that `ListMerchants` returns a list
#  with a single `Merchant` object. You can specify your personal access token
#  to get your own merchant information or specify an OAuth token to get the
#  information for the merchant that granted your application access.
#  If you know the merchant ID, you can also use the
#  [RetrieveMerchant](api-endpoint:Merchants-RetrieveMerchant)
#  endpoint to retrieve the merchant information.
    #
    # @param cursor [Integer] The cursor generated by the previous response.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::ListMerchantsResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.merchants.list
    def list(cursor: nil, request_options: nil)
      Async do
        response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  req.params = { **(request_options&.additional_query_parameters || {}), "cursor": cursor }.compact
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/merchants"
end
        SquareApiClient::ListMerchantsResponse.from_json(json_object: response.body)
      end
    end
# Retrieves the `Merchant` object for the given `merchant_id`.
    #
    # @param merchant_id [String] The ID of the merchant to retrieve. If the string "me" is supplied as the ID,
#  then retrieve the merchant that is currently accessible to this call.
    # @param request_options [SquareApiClient::RequestOptions] 
    # @return [SquareApiClient::GetMerchantResponse]
    # @example
#  api = SquareApiClient::Client.new(
#    base_url: "https://api.example.com",
#    environment: SquareApiClient::Environment::PRODUCTION,
#    token: "YOUR_AUTH_TOKEN",
#    version: "Version"
#  )
#  api.merchants.get(merchant_id: "merchant_id")
    def get(merchant_id:, request_options: nil)
      Async do
        response = @request_client.conn.get do | req |
  unless request_options&.timeout_in_seconds.nil?
    req.options.timeout = request_options.timeout_in_seconds
  end
  unless request_options&.token.nil?
    req.headers["Authorization"] = request_options.token
  end
  unless request_options&.version.nil?
    req.headers["Square-Version"] = request_options.version
  end
  req.headers = { **(req.headers || {}), **@request_client.get_headers, **(request_options&.additional_headers || {}) }.compact
  unless request_options.nil? || request_options&.additional_query_parameters.nil?
    req.params = { **(request_options&.additional_query_parameters || {}) }.compact
  end
  unless request_options.nil? || request_options&.additional_body_parameters.nil?
    req.body = { **(request_options&.additional_body_parameters || {}) }.compact
  end
  req.url "#{@request_client.get_url(request_options: request_options)}/v2/merchants/#{merchant_id}"
end
        SquareApiClient::GetMerchantResponse.from_json(json_object: response.body)
      end
    end
  end
end