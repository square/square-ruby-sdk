# frozen_string_literal: true
require_relative "money"
require_relative "dispute_reason"
require_relative "dispute_state"
require_relative "disputed_payment"
require_relative "card_brand"
require "ostruct"
require "json"

module SquareApiClient
# Represents a
#  [dispute](https://developer.squareup.com/docs/disputes-api/overview) a
#  cardholder initiated with their bank.
  class Dispute
  # @return [String] The unique ID for this `Dispute`, generated by Square.
    attr_reader :dispute_id
  # @return [String] The unique ID for this `Dispute`, generated by Square.
    attr_reader :id
  # @return [SquareApiClient::Money] The disputed amount, which can be less than the total transaction amount.
#  For instance, if multiple items were purchased but the cardholder only initiates
#  a dispute over some of the items.
    attr_reader :amount_money
  # @return [SquareApiClient::DisputeReason] The reason why the cardholder initiated the dispute.
#  See [DisputeReason](#type-disputereason) for possible values
    attr_reader :reason
  # @return [SquareApiClient::DisputeState] The current state of this dispute.
#  See [DisputeState](#type-disputestate) for possible values
    attr_reader :state
  # @return [String] The deadline by which the seller must respond to the dispute, in [RFC 3339
#  /developer.squareup.com/docs/build-basics/common-data-types/working-with-dates).
    attr_reader :due_at
  # @return [SquareApiClient::DisputedPayment] The payment challenged in this dispute.
    attr_reader :disputed_payment
  # @return [Array<String>] The IDs of the evidence associated with the dispute.
    attr_reader :evidence_ids
  # @return [SquareApiClient::CardBrand] The card brand used in the disputed payment.
#  See [CardBrand](#type-cardbrand) for possible values
    attr_reader :card_brand
  # @return [String] The timestamp when the dispute was created, in RFC 3339 format.
    attr_reader :created_at
  # @return [String] The timestamp when the dispute was last updated, in RFC 3339 format.
    attr_reader :updated_at
  # @return [String] The ID of the dispute in the card brand system, generated by the card brand.
    attr_reader :brand_dispute_id
  # @return [String] The timestamp when the dispute was reported, in RFC 3339 format.
    attr_reader :reported_date
  # @return [String] The timestamp when the dispute was reported, in RFC 3339 format.
    attr_reader :reported_at
  # @return [Integer] The current version of the `Dispute`.
    attr_reader :version
  # @return [String] The ID of the location where the dispute originated.
    attr_reader :location_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param dispute_id [String] The unique ID for this `Dispute`, generated by Square.
    # @param id [String] The unique ID for this `Dispute`, generated by Square.
    # @param amount_money [SquareApiClient::Money] The disputed amount, which can be less than the total transaction amount.
#  For instance, if multiple items were purchased but the cardholder only initiates
#  a dispute over some of the items.
    # @param reason [SquareApiClient::DisputeReason] The reason why the cardholder initiated the dispute.
#  See [DisputeReason](#type-disputereason) for possible values
    # @param state [SquareApiClient::DisputeState] The current state of this dispute.
#  See [DisputeState](#type-disputestate) for possible values
    # @param due_at [String] The deadline by which the seller must respond to the dispute, in [RFC 3339
#  /developer.squareup.com/docs/build-basics/common-data-types/working-with-dates).
    # @param disputed_payment [SquareApiClient::DisputedPayment] The payment challenged in this dispute.
    # @param evidence_ids [Array<String>] The IDs of the evidence associated with the dispute.
    # @param card_brand [SquareApiClient::CardBrand] The card brand used in the disputed payment.
#  See [CardBrand](#type-cardbrand) for possible values
    # @param created_at [String] The timestamp when the dispute was created, in RFC 3339 format.
    # @param updated_at [String] The timestamp when the dispute was last updated, in RFC 3339 format.
    # @param brand_dispute_id [String] The ID of the dispute in the card brand system, generated by the card brand.
    # @param reported_date [String] The timestamp when the dispute was reported, in RFC 3339 format.
    # @param reported_at [String] The timestamp when the dispute was reported, in RFC 3339 format.
    # @param version [Integer] The current version of the `Dispute`.
    # @param location_id [String] The ID of the location where the dispute originated.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::Dispute]
    def initialize(dispute_id: OMIT, id: OMIT, amount_money: OMIT, reason: OMIT, state: OMIT, due_at: OMIT, disputed_payment: OMIT, evidence_ids: OMIT, card_brand: OMIT, created_at: OMIT, updated_at: OMIT, brand_dispute_id: OMIT, reported_date: OMIT, reported_at: OMIT, version: OMIT, location_id: OMIT, additional_properties: nil)
      @dispute_id = dispute_id if dispute_id != OMIT
      @id = id if id != OMIT
      @amount_money = amount_money if amount_money != OMIT
      @reason = reason if reason != OMIT
      @state = state if state != OMIT
      @due_at = due_at if due_at != OMIT
      @disputed_payment = disputed_payment if disputed_payment != OMIT
      @evidence_ids = evidence_ids if evidence_ids != OMIT
      @card_brand = card_brand if card_brand != OMIT
      @created_at = created_at if created_at != OMIT
      @updated_at = updated_at if updated_at != OMIT
      @brand_dispute_id = brand_dispute_id if brand_dispute_id != OMIT
      @reported_date = reported_date if reported_date != OMIT
      @reported_at = reported_at if reported_at != OMIT
      @version = version if version != OMIT
      @location_id = location_id if location_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "dispute_id": dispute_id, "id": id, "amount_money": amount_money, "reason": reason, "state": state, "due_at": due_at, "disputed_payment": disputed_payment, "evidence_ids": evidence_ids, "card_brand": card_brand, "created_at": created_at, "updated_at": updated_at, "brand_dispute_id": brand_dispute_id, "reported_date": reported_date, "reported_at": reported_at, "version": version, "location_id": location_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Dispute
    #
    # @param json_object [String] 
    # @return [SquareApiClient::Dispute]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      dispute_id = parsed_json["dispute_id"]
      id = parsed_json["id"]
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = SquareApiClient::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      reason = parsed_json["reason"]
      state = parsed_json["state"]
      due_at = parsed_json["due_at"]
      unless parsed_json["disputed_payment"].nil?
        disputed_payment = parsed_json["disputed_payment"].to_json
        disputed_payment = SquareApiClient::DisputedPayment.from_json(json_object: disputed_payment)
      else
        disputed_payment = nil
      end
      evidence_ids = parsed_json["evidence_ids"]
      card_brand = parsed_json["card_brand"]
      created_at = parsed_json["created_at"]
      updated_at = parsed_json["updated_at"]
      brand_dispute_id = parsed_json["brand_dispute_id"]
      reported_date = parsed_json["reported_date"]
      reported_at = parsed_json["reported_at"]
      version = parsed_json["version"]
      location_id = parsed_json["location_id"]
      new(
        dispute_id: dispute_id,
        id: id,
        amount_money: amount_money,
        reason: reason,
        state: state,
        due_at: due_at,
        disputed_payment: disputed_payment,
        evidence_ids: evidence_ids,
        card_brand: card_brand,
        created_at: created_at,
        updated_at: updated_at,
        brand_dispute_id: brand_dispute_id,
        reported_date: reported_date,
        reported_at: reported_at,
        version: version,
        location_id: location_id,
        additional_properties: struct
      )
    end
# Serialize an instance of Dispute to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.dispute_id&.is_a?(String) != false || raise("Passed value for field obj.dispute_id is not the expected type, validation failed.")
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.amount_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.amount_money)
      obj.reason&.is_a?(SquareApiClient::DisputeReason) != false || raise("Passed value for field obj.reason is not the expected type, validation failed.")
      obj.state&.is_a?(SquareApiClient::DisputeState) != false || raise("Passed value for field obj.state is not the expected type, validation failed.")
      obj.due_at&.is_a?(String) != false || raise("Passed value for field obj.due_at is not the expected type, validation failed.")
      obj.disputed_payment.nil? || SquareApiClient::DisputedPayment.validate_raw(obj: obj.disputed_payment)
      obj.evidence_ids&.is_a?(Array) != false || raise("Passed value for field obj.evidence_ids is not the expected type, validation failed.")
      obj.card_brand&.is_a?(SquareApiClient::CardBrand) != false || raise("Passed value for field obj.card_brand is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.updated_at&.is_a?(String) != false || raise("Passed value for field obj.updated_at is not the expected type, validation failed.")
      obj.brand_dispute_id&.is_a?(String) != false || raise("Passed value for field obj.brand_dispute_id is not the expected type, validation failed.")
      obj.reported_date&.is_a?(String) != false || raise("Passed value for field obj.reported_date is not the expected type, validation failed.")
      obj.reported_at&.is_a?(String) != false || raise("Passed value for field obj.reported_at is not the expected type, validation failed.")
      obj.version&.is_a?(Integer) != false || raise("Passed value for field obj.version is not the expected type, validation failed.")
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
    end
  end
end