# frozen_string_literal: true
require_relative "destination_details"
require_relative "money"
require_relative "processing_fee"
require "ostruct"
require "json"

module SquareApiClient
# Represents a refund of a payment made using Square. Contains information about
#  the original payment and the amount of money refunded.
  class PaymentRefund
  # @return [String] The unique ID for this refund, generated by Square.
    attr_reader :id
  # @return [String] The refund's status:
#  - `PENDING` - Awaiting approval.
#  - `COMPLETED` - Successfully completed.
#  - `REJECTED` - The refund was rejected.
#  - `FAILED` - An error occurred.
    attr_reader :status
  # @return [String] The location ID associated with the payment this refund is attached to.
    attr_reader :location_id
  # @return [Boolean] Flag indicating whether or not the refund is linked to an existing payment in
#  Square.
    attr_reader :unlinked
  # @return [String] The destination type for this refund.
#  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`,
#  `CASH`,
#  `EXTERNAL`, and `SQUARE_ACCOUNT`.
    attr_reader :destination_type
  # @return [SquareApiClient::DestinationDetails] Contains information about the refund destination. This field is populated only
#  if
#  `destination_id` is defined in the `RefundPayment` request.
    attr_reader :destination_details
  # @return [SquareApiClient::Money] The amount of money refunded. This amount is specified in the smallest
#  denomination
#  of the applicable currency (for example, US dollar amounts are specified in
#  cents).
    attr_reader :amount_money
  # @return [SquareApiClient::Money] The amount of money the application developer contributed to help cover the
#  refunded amount.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    attr_reader :app_fee_money
  # @return [Array<SquareApiClient::ProcessingFee>] Processing fees and fee adjustments assessed by Square for this refund.
    attr_reader :processing_fee
  # @return [String] The ID of the payment associated with this refund.
    attr_reader :payment_id
  # @return [String] The ID of the order associated with the refund.
    attr_reader :order_id
  # @return [String] The reason for the refund.
    attr_reader :reason
  # @return [String] The timestamp of when the refund was created, in RFC 3339 format.
    attr_reader :created_at
  # @return [String] The timestamp of when the refund was last updated, in RFC 3339 format.
    attr_reader :updated_at
  # @return [String] An optional ID of the team member associated with taking the payment.
    attr_reader :team_member_id
  # @return [String] An optional ID for a Terminal refund.
    attr_reader :terminal_refund_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] The unique ID for this refund, generated by Square.
    # @param status [String] The refund's status:
#  - `PENDING` - Awaiting approval.
#  - `COMPLETED` - Successfully completed.
#  - `REJECTED` - The refund was rejected.
#  - `FAILED` - An error occurred.
    # @param location_id [String] The location ID associated with the payment this refund is attached to.
    # @param unlinked [Boolean] Flag indicating whether or not the refund is linked to an existing payment in
#  Square.
    # @param destination_type [String] The destination type for this refund.
#  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`,
#  `CASH`,
#  `EXTERNAL`, and `SQUARE_ACCOUNT`.
    # @param destination_details [SquareApiClient::DestinationDetails] Contains information about the refund destination. This field is populated only
#  if
#  `destination_id` is defined in the `RefundPayment` request.
    # @param amount_money [SquareApiClient::Money] The amount of money refunded. This amount is specified in the smallest
#  denomination
#  of the applicable currency (for example, US dollar amounts are specified in
#  cents).
    # @param app_fee_money [SquareApiClient::Money] The amount of money the application developer contributed to help cover the
#  refunded amount.
#  This amount is specified in the smallest denomination of the applicable currency
#  (for example,
#  US dollar amounts are specified in cents). For more information, see
#  [Working with Monetary
#  https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
    # @param processing_fee [Array<SquareApiClient::ProcessingFee>] Processing fees and fee adjustments assessed by Square for this refund.
    # @param payment_id [String] The ID of the payment associated with this refund.
    # @param order_id [String] The ID of the order associated with the refund.
    # @param reason [String] The reason for the refund.
    # @param created_at [String] The timestamp of when the refund was created, in RFC 3339 format.
    # @param updated_at [String] The timestamp of when the refund was last updated, in RFC 3339 format.
    # @param team_member_id [String] An optional ID of the team member associated with taking the payment.
    # @param terminal_refund_id [String] An optional ID for a Terminal refund.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::PaymentRefund]
    def initialize(id:, status: OMIT, location_id: OMIT, unlinked: OMIT, destination_type: OMIT, destination_details: OMIT, amount_money:, app_fee_money: OMIT, processing_fee: OMIT, payment_id: OMIT, order_id: OMIT, reason: OMIT, created_at: OMIT, updated_at: OMIT, team_member_id: OMIT, terminal_refund_id: OMIT, additional_properties: nil)
      @id = id
      @status = status if status != OMIT
      @location_id = location_id if location_id != OMIT
      @unlinked = unlinked if unlinked != OMIT
      @destination_type = destination_type if destination_type != OMIT
      @destination_details = destination_details if destination_details != OMIT
      @amount_money = amount_money
      @app_fee_money = app_fee_money if app_fee_money != OMIT
      @processing_fee = processing_fee if processing_fee != OMIT
      @payment_id = payment_id if payment_id != OMIT
      @order_id = order_id if order_id != OMIT
      @reason = reason if reason != OMIT
      @created_at = created_at if created_at != OMIT
      @updated_at = updated_at if updated_at != OMIT
      @team_member_id = team_member_id if team_member_id != OMIT
      @terminal_refund_id = terminal_refund_id if terminal_refund_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "status": status, "location_id": location_id, "unlinked": unlinked, "destination_type": destination_type, "destination_details": destination_details, "amount_money": amount_money, "app_fee_money": app_fee_money, "processing_fee": processing_fee, "payment_id": payment_id, "order_id": order_id, "reason": reason, "created_at": created_at, "updated_at": updated_at, "team_member_id": team_member_id, "terminal_refund_id": terminal_refund_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of PaymentRefund
    #
    # @param json_object [String] 
    # @return [SquareApiClient::PaymentRefund]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      status = parsed_json["status"]
      location_id = parsed_json["location_id"]
      unlinked = parsed_json["unlinked"]
      destination_type = parsed_json["destination_type"]
      unless parsed_json["destination_details"].nil?
        destination_details = parsed_json["destination_details"].to_json
        destination_details = SquareApiClient::DestinationDetails.from_json(json_object: destination_details)
      else
        destination_details = nil
      end
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = SquareApiClient::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      unless parsed_json["app_fee_money"].nil?
        app_fee_money = parsed_json["app_fee_money"].to_json
        app_fee_money = SquareApiClient::Money.from_json(json_object: app_fee_money)
      else
        app_fee_money = nil
      end
      processing_fee = parsed_json["processing_fee"]&.map do | item |
  item = item.to_json
  SquareApiClient::ProcessingFee.from_json(json_object: item)
end
      payment_id = parsed_json["payment_id"]
      order_id = parsed_json["order_id"]
      reason = parsed_json["reason"]
      created_at = parsed_json["created_at"]
      updated_at = parsed_json["updated_at"]
      team_member_id = parsed_json["team_member_id"]
      terminal_refund_id = parsed_json["terminal_refund_id"]
      new(
        id: id,
        status: status,
        location_id: location_id,
        unlinked: unlinked,
        destination_type: destination_type,
        destination_details: destination_details,
        amount_money: amount_money,
        app_fee_money: app_fee_money,
        processing_fee: processing_fee,
        payment_id: payment_id,
        order_id: order_id,
        reason: reason,
        created_at: created_at,
        updated_at: updated_at,
        team_member_id: team_member_id,
        terminal_refund_id: terminal_refund_id,
        additional_properties: struct
      )
    end
# Serialize an instance of PaymentRefund to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.status&.is_a?(String) != false || raise("Passed value for field obj.status is not the expected type, validation failed.")
      obj.location_id&.is_a?(String) != false || raise("Passed value for field obj.location_id is not the expected type, validation failed.")
      obj.unlinked&.is_a?(Boolean) != false || raise("Passed value for field obj.unlinked is not the expected type, validation failed.")
      obj.destination_type&.is_a?(String) != false || raise("Passed value for field obj.destination_type is not the expected type, validation failed.")
      obj.destination_details.nil? || SquareApiClient::DestinationDetails.validate_raw(obj: obj.destination_details)
      SquareApiClient::Money.validate_raw(obj: obj.amount_money)
      obj.app_fee_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.app_fee_money)
      obj.processing_fee&.is_a?(Array) != false || raise("Passed value for field obj.processing_fee is not the expected type, validation failed.")
      obj.payment_id&.is_a?(String) != false || raise("Passed value for field obj.payment_id is not the expected type, validation failed.")
      obj.order_id&.is_a?(String) != false || raise("Passed value for field obj.order_id is not the expected type, validation failed.")
      obj.reason&.is_a?(String) != false || raise("Passed value for field obj.reason is not the expected type, validation failed.")
      obj.created_at&.is_a?(String) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.updated_at&.is_a?(String) != false || raise("Passed value for field obj.updated_at is not the expected type, validation failed.")
      obj.team_member_id&.is_a?(String) != false || raise("Passed value for field obj.team_member_id is not the expected type, validation failed.")
      obj.terminal_refund_id&.is_a?(String) != false || raise("Passed value for field obj.terminal_refund_id is not the expected type, validation failed.")
    end
  end
end