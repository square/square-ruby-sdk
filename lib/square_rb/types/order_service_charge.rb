# frozen_string_literal: true
require_relative "money"
require_relative "order_service_charge_calculation_phase"
require_relative "order_line_item_applied_tax"
require_relative "order_service_charge_type"
require_relative "order_service_charge_treatment_type"
require_relative "order_service_charge_scope"
require "ostruct"
require "json"

module SquareApiClient
# Represents a service charge applied to an order.
  class OrderServiceCharge
  # @return [String] A unique ID that identifies the service charge only within this order.
    attr_reader :uid
  # @return [String] The name of the service charge.
    attr_reader :name
  # @return [String] The catalog object ID referencing the service charge
#  [CatalogObject](entity:CatalogObject).
    attr_reader :catalog_object_id
  # @return [Long] The version of the catalog object that this service charge references.
    attr_reader :catalog_version
  # @return [String] The service charge percentage as a string representation of a
#  decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
#  Exactly 1 of `percentage` or `amount_money` should be set.
    attr_reader :percentage
  # @return [SquareApiClient::Money] The amount of a non-percentage-based service charge.
#  Exactly one of `percentage` or `amount_money` should be set.
    attr_reader :amount_money
  # @return [SquareApiClient::Money] The amount of money applied to the order by the service charge,
#  including any inclusive tax amounts, as calculated by Square.
#  - For fixed-amount service charges, `applied_money` is equal to `amount_money`.
#  - For percentage-based service charges, `applied_money` is the money
#  calculated using the percentage.
    attr_reader :applied_money
  # @return [SquareApiClient::Money] The total amount of money to collect for the service charge.
#  __Note__: If an inclusive tax is applied to the service charge,
#  `total_money` does not equal `applied_money` plus `total_tax_money`
#  because the inclusive tax amount is already included in both
#  `applied_money` and `total_tax_money`.
    attr_reader :total_money
  # @return [SquareApiClient::Money] The total amount of tax money to collect for the service charge.
    attr_reader :total_tax_money
  # @return [SquareApiClient::OrderServiceChargeCalculationPhase] The calculation phase at which to apply the service charge.
#  See
#  [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase)
#  for possible values
    attr_reader :calculation_phase
  # @return [Boolean] Indicates whether the service charge can be taxed. If set to `true`,
#  order-level taxes automatically apply to the service charge. Note that
#  service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
    attr_reader :taxable
  # @return [Array<SquareApiClient::OrderLineItemAppliedTax>] The list of references to the taxes applied to this service charge. Each
#  `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
#  top-level
#  `OrderLineItemTax` that is being applied to this service charge. On reads, the
#  amount applied
#  is populated.
#  An `OrderLineItemAppliedTax` is automatically created on every taxable service
#  charge
#  for all `ORDER` scoped taxes that are added to the order.
#  `OrderLineItemAppliedTax` records
#  for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to
#  any taxable
#  service charge. Taxable service charges have the `taxable` field set to `true`
#  and calculated
#  in the `SUBTOTAL_PHASE`.
#  To change the amount of a tax, modify the referenced top-level tax.
    attr_reader :applied_taxes
  # @return [Hash{String => String}] Application-defined data attached to this service charge. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    attr_reader :metadata
  # @return [SquareApiClient::OrderServiceChargeType] The type of the service charge.
#  See [OrderServiceChargeType](#type-orderservicechargetype) for possible values
    attr_reader :type
  # @return [SquareApiClient::OrderServiceChargeTreatmentType] The treatment type of the service charge.
#  See [OrderServiceChargeTreatmentType](#type-orderservicechargetreatmenttype) for
#  possible values
    attr_reader :treatment_type
  # @return [SquareApiClient::OrderServiceChargeScope] Indicates the level at which the apportioned service charge applies. For `ORDER`
#  scoped service charges, Square generates references in `applied_service_charges`
#  on
#  all order line items that do not have them. For `LINE_ITEM` scoped service
#  charges,
#  the service charge only applies to line items with a service charge reference in
#  their
#  `applied_service_charges` field.
#  This field is immutable. To change the scope of an apportioned service charge,
#  you must delete
#  the apportioned service charge and re-add it as a new apportioned service
#  charge.
#  See [OrderServiceChargeScope](#type-orderservicechargescope) for possible values
    attr_reader :scope
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param uid [String] A unique ID that identifies the service charge only within this order.
    # @param name [String] The name of the service charge.
    # @param catalog_object_id [String] The catalog object ID referencing the service charge
#  [CatalogObject](entity:CatalogObject).
    # @param catalog_version [Long] The version of the catalog object that this service charge references.
    # @param percentage [String] The service charge percentage as a string representation of a
#  decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
#  Exactly 1 of `percentage` or `amount_money` should be set.
    # @param amount_money [SquareApiClient::Money] The amount of a non-percentage-based service charge.
#  Exactly one of `percentage` or `amount_money` should be set.
    # @param applied_money [SquareApiClient::Money] The amount of money applied to the order by the service charge,
#  including any inclusive tax amounts, as calculated by Square.
#  - For fixed-amount service charges, `applied_money` is equal to `amount_money`.
#  - For percentage-based service charges, `applied_money` is the money
#  calculated using the percentage.
    # @param total_money [SquareApiClient::Money] The total amount of money to collect for the service charge.
#  __Note__: If an inclusive tax is applied to the service charge,
#  `total_money` does not equal `applied_money` plus `total_tax_money`
#  because the inclusive tax amount is already included in both
#  `applied_money` and `total_tax_money`.
    # @param total_tax_money [SquareApiClient::Money] The total amount of tax money to collect for the service charge.
    # @param calculation_phase [SquareApiClient::OrderServiceChargeCalculationPhase] The calculation phase at which to apply the service charge.
#  See
#  [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase)
#  for possible values
    # @param taxable [Boolean] Indicates whether the service charge can be taxed. If set to `true`,
#  order-level taxes automatically apply to the service charge. Note that
#  service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
    # @param applied_taxes [Array<SquareApiClient::OrderLineItemAppliedTax>] The list of references to the taxes applied to this service charge. Each
#  `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
#  top-level
#  `OrderLineItemTax` that is being applied to this service charge. On reads, the
#  amount applied
#  is populated.
#  An `OrderLineItemAppliedTax` is automatically created on every taxable service
#  charge
#  for all `ORDER` scoped taxes that are added to the order.
#  `OrderLineItemAppliedTax` records
#  for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to
#  any taxable
#  service charge. Taxable service charges have the `taxable` field set to `true`
#  and calculated
#  in the `SUBTOTAL_PHASE`.
#  To change the amount of a tax, modify the referenced top-level tax.
    # @param metadata [Hash{String => String}] Application-defined data attached to this service charge. Metadata fields are
#  intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    # @param type [SquareApiClient::OrderServiceChargeType] The type of the service charge.
#  See [OrderServiceChargeType](#type-orderservicechargetype) for possible values
    # @param treatment_type [SquareApiClient::OrderServiceChargeTreatmentType] The treatment type of the service charge.
#  See [OrderServiceChargeTreatmentType](#type-orderservicechargetreatmenttype) for
#  possible values
    # @param scope [SquareApiClient::OrderServiceChargeScope] Indicates the level at which the apportioned service charge applies. For `ORDER`
#  scoped service charges, Square generates references in `applied_service_charges`
#  on
#  all order line items that do not have them. For `LINE_ITEM` scoped service
#  charges,
#  the service charge only applies to line items with a service charge reference in
#  their
#  `applied_service_charges` field.
#  This field is immutable. To change the scope of an apportioned service charge,
#  you must delete
#  the apportioned service charge and re-add it as a new apportioned service
#  charge.
#  See [OrderServiceChargeScope](#type-orderservicechargescope) for possible values
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::OrderServiceCharge]
    def initialize(uid: OMIT, name: OMIT, catalog_object_id: OMIT, catalog_version: OMIT, percentage: OMIT, amount_money: OMIT, applied_money: OMIT, total_money: OMIT, total_tax_money: OMIT, calculation_phase: OMIT, taxable: OMIT, applied_taxes: OMIT, metadata: OMIT, type: OMIT, treatment_type: OMIT, scope: OMIT, additional_properties: nil)
      @uid = uid if uid != OMIT
      @name = name if name != OMIT
      @catalog_object_id = catalog_object_id if catalog_object_id != OMIT
      @catalog_version = catalog_version if catalog_version != OMIT
      @percentage = percentage if percentage != OMIT
      @amount_money = amount_money if amount_money != OMIT
      @applied_money = applied_money if applied_money != OMIT
      @total_money = total_money if total_money != OMIT
      @total_tax_money = total_tax_money if total_tax_money != OMIT
      @calculation_phase = calculation_phase if calculation_phase != OMIT
      @taxable = taxable if taxable != OMIT
      @applied_taxes = applied_taxes if applied_taxes != OMIT
      @metadata = metadata if metadata != OMIT
      @type = type if type != OMIT
      @treatment_type = treatment_type if treatment_type != OMIT
      @scope = scope if scope != OMIT
      @additional_properties = additional_properties
      @_field_set = { "uid": uid, "name": name, "catalog_object_id": catalog_object_id, "catalog_version": catalog_version, "percentage": percentage, "amount_money": amount_money, "applied_money": applied_money, "total_money": total_money, "total_tax_money": total_tax_money, "calculation_phase": calculation_phase, "taxable": taxable, "applied_taxes": applied_taxes, "metadata": metadata, "type": type, "treatment_type": treatment_type, "scope": scope }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of OrderServiceCharge
    #
    # @param json_object [String] 
    # @return [SquareApiClient::OrderServiceCharge]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      uid = parsed_json["uid"]
      name = parsed_json["name"]
      catalog_object_id = parsed_json["catalog_object_id"]
      catalog_version = parsed_json["catalog_version"]
      percentage = parsed_json["percentage"]
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = SquareApiClient::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      unless parsed_json["applied_money"].nil?
        applied_money = parsed_json["applied_money"].to_json
        applied_money = SquareApiClient::Money.from_json(json_object: applied_money)
      else
        applied_money = nil
      end
      unless parsed_json["total_money"].nil?
        total_money = parsed_json["total_money"].to_json
        total_money = SquareApiClient::Money.from_json(json_object: total_money)
      else
        total_money = nil
      end
      unless parsed_json["total_tax_money"].nil?
        total_tax_money = parsed_json["total_tax_money"].to_json
        total_tax_money = SquareApiClient::Money.from_json(json_object: total_tax_money)
      else
        total_tax_money = nil
      end
      calculation_phase = parsed_json["calculation_phase"]
      taxable = parsed_json["taxable"]
      applied_taxes = parsed_json["applied_taxes"]&.map do | item |
  item = item.to_json
  SquareApiClient::OrderLineItemAppliedTax.from_json(json_object: item)
end
      metadata = parsed_json["metadata"]
      type = parsed_json["type"]
      treatment_type = parsed_json["treatment_type"]
      scope = parsed_json["scope"]
      new(
        uid: uid,
        name: name,
        catalog_object_id: catalog_object_id,
        catalog_version: catalog_version,
        percentage: percentage,
        amount_money: amount_money,
        applied_money: applied_money,
        total_money: total_money,
        total_tax_money: total_tax_money,
        calculation_phase: calculation_phase,
        taxable: taxable,
        applied_taxes: applied_taxes,
        metadata: metadata,
        type: type,
        treatment_type: treatment_type,
        scope: scope,
        additional_properties: struct
      )
    end
# Serialize an instance of OrderServiceCharge to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.uid&.is_a?(String) != false || raise("Passed value for field obj.uid is not the expected type, validation failed.")
      obj.name&.is_a?(String) != false || raise("Passed value for field obj.name is not the expected type, validation failed.")
      obj.catalog_object_id&.is_a?(String) != false || raise("Passed value for field obj.catalog_object_id is not the expected type, validation failed.")
      obj.catalog_version&.is_a?(Long) != false || raise("Passed value for field obj.catalog_version is not the expected type, validation failed.")
      obj.percentage&.is_a?(String) != false || raise("Passed value for field obj.percentage is not the expected type, validation failed.")
      obj.amount_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.amount_money)
      obj.applied_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.applied_money)
      obj.total_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.total_money)
      obj.total_tax_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.total_tax_money)
      obj.calculation_phase&.is_a?(SquareApiClient::OrderServiceChargeCalculationPhase) != false || raise("Passed value for field obj.calculation_phase is not the expected type, validation failed.")
      obj.taxable&.is_a?(Boolean) != false || raise("Passed value for field obj.taxable is not the expected type, validation failed.")
      obj.applied_taxes&.is_a?(Array) != false || raise("Passed value for field obj.applied_taxes is not the expected type, validation failed.")
      obj.metadata&.is_a?(Hash) != false || raise("Passed value for field obj.metadata is not the expected type, validation failed.")
      obj.type&.is_a?(SquareApiClient::OrderServiceChargeType) != false || raise("Passed value for field obj.type is not the expected type, validation failed.")
      obj.treatment_type&.is_a?(SquareApiClient::OrderServiceChargeTreatmentType) != false || raise("Passed value for field obj.treatment_type is not the expected type, validation failed.")
      obj.scope&.is_a?(SquareApiClient::OrderServiceChargeScope) != false || raise("Passed value for field obj.scope is not the expected type, validation failed.")
    end
  end
end