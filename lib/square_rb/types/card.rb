# frozen_string_literal: true
require_relative "card_brand"
require_relative "address"
require_relative "card_type"
require_relative "card_prepaid_type"
require_relative "card_co_brand"
require_relative "card_issuer_alert"
require "ostruct"
require "json"

module SquareApiClient
# Represents the payment details of a card to be used for payments. These
#  details are determined by the payment token generated by Web Payments SDK.
  class Card
  # @return [String] Unique ID for this card. Generated by Square.
    attr_reader :id
  # @return [SquareApiClient::CardBrand] The card's brand.
#  See [CardBrand](#type-cardbrand) for possible values
    attr_reader :card_brand
  # @return [String] The last 4 digits of the card number.
    attr_reader :last_4
  # @return [Long] The expiration month of the associated card as an integer between 1 and 12.
    attr_reader :exp_month
  # @return [Long] The four-digit year of the card's expiration date.
    attr_reader :exp_year
  # @return [String] The name of the cardholder.
    attr_reader :cardholder_name
  # @return [SquareApiClient::Address] The billing address for this card. `US` postal codes can be provided as a
#  5-digit zip code
#  or 9-digit ZIP+4 (example: `12345-6789`). For a full list of field meanings by
#  country, see
#  [Working with
#  eloper.squareup.com/docs/build-basics/common-data-types/working-with-addresses).
    attr_reader :billing_address
  # @return [String] Intended as a Square-assigned identifier, based
#  on the card number, to identify the card across multiple locations within a
#  single application.
    attr_reader :fingerprint
  # @return [String] **Required** The ID of a [customer](entity:Customer) to be associated with the
#  card.
    attr_reader :customer_id
  # @return [String] The ID of the merchant associated with the card.
    attr_reader :merchant_id
  # @return [String] An optional user-defined reference ID that associates this card with
#  another entity in an external system. For example, a customer ID from an
#  external customer management system.
    attr_reader :reference_id
  # @return [Boolean] Indicates whether or not a card can be used for payments.
    attr_reader :enabled
  # @return [SquareApiClient::CardType] The type of the card.
#  The Card object includes this field only in response to Payments API calls.
#  See [CardType](#type-cardtype) for possible values
    attr_reader :card_type
  # @return [SquareApiClient::CardPrepaidType] Indicates whether the card is prepaid or not.
#  See [CardPrepaidType](#type-cardprepaidtype) for possible values
    attr_reader :prepaid_type
  # @return [String] The first six digits of the card number, known as the Bank Identification Number
#  (BIN). Only the Payments API
#  returns this field.
    attr_reader :bin
  # @return [Long] Current version number of the card. Increments with each card update. Requests
#  to update an
#  existing Card object will be rejected unless the version in the request matches
#  the current
#  version for the Card.
    attr_reader :version
  # @return [SquareApiClient::CardCoBrand] The card's co-brand if available. For example, an Afterpay virtual card would
#  have a
#  co-brand of AFTERPAY.
#  See [CardCoBrand](#type-cardcobrand) for possible values
    attr_reader :card_co_brand
  # @return [SquareApiClient::CARD_ISSUER_ALERT] An alert from the issuing bank about the card status. Alerts can indicate
#  whether
#  future charges to the card are likely to fail. For more information, see
#  [Manage Card on File
#  es](https://developer.squareup.com/docs/cards-api/manage-card-on-file-declines).
#  This field is present only if there's an active issuer alert.
#  See [IssuerAlert](#type-issueralert) for possible values
    attr_reader :issuer_alert
  # @return [String] The timestamp of when the current issuer alert was received and processed, in
#  RFC 3339 format.
#  This field is present only if there's an active issuer alert.
    attr_reader :issuer_alert_at
  # @return [Boolean] Indicates whether the card is linked to a Health Savings Account (HSA) or
#  Flexible
#  Spending Account (FSA), based on the card BIN.
    attr_reader :hsa_fsa
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] Unique ID for this card. Generated by Square.
    # @param card_brand [SquareApiClient::CardBrand] The card's brand.
#  See [CardBrand](#type-cardbrand) for possible values
    # @param last_4 [String] The last 4 digits of the card number.
    # @param exp_month [Long] The expiration month of the associated card as an integer between 1 and 12.
    # @param exp_year [Long] The four-digit year of the card's expiration date.
    # @param cardholder_name [String] The name of the cardholder.
    # @param billing_address [SquareApiClient::Address] The billing address for this card. `US` postal codes can be provided as a
#  5-digit zip code
#  or 9-digit ZIP+4 (example: `12345-6789`). For a full list of field meanings by
#  country, see
#  [Working with
#  eloper.squareup.com/docs/build-basics/common-data-types/working-with-addresses).
    # @param fingerprint [String] Intended as a Square-assigned identifier, based
#  on the card number, to identify the card across multiple locations within a
#  single application.
    # @param customer_id [String] **Required** The ID of a [customer](entity:Customer) to be associated with the
#  card.
    # @param merchant_id [String] The ID of the merchant associated with the card.
    # @param reference_id [String] An optional user-defined reference ID that associates this card with
#  another entity in an external system. For example, a customer ID from an
#  external customer management system.
    # @param enabled [Boolean] Indicates whether or not a card can be used for payments.
    # @param card_type [SquareApiClient::CardType] The type of the card.
#  The Card object includes this field only in response to Payments API calls.
#  See [CardType](#type-cardtype) for possible values
    # @param prepaid_type [SquareApiClient::CardPrepaidType] Indicates whether the card is prepaid or not.
#  See [CardPrepaidType](#type-cardprepaidtype) for possible values
    # @param bin [String] The first six digits of the card number, known as the Bank Identification Number
#  (BIN). Only the Payments API
#  returns this field.
    # @param version [Long] Current version number of the card. Increments with each card update. Requests
#  to update an
#  existing Card object will be rejected unless the version in the request matches
#  the current
#  version for the Card.
    # @param card_co_brand [SquareApiClient::CardCoBrand] The card's co-brand if available. For example, an Afterpay virtual card would
#  have a
#  co-brand of AFTERPAY.
#  See [CardCoBrand](#type-cardcobrand) for possible values
    # @param issuer_alert [SquareApiClient::CARD_ISSUER_ALERT] An alert from the issuing bank about the card status. Alerts can indicate
#  whether
#  future charges to the card are likely to fail. For more information, see
#  [Manage Card on File
#  es](https://developer.squareup.com/docs/cards-api/manage-card-on-file-declines).
#  This field is present only if there's an active issuer alert.
#  See [IssuerAlert](#type-issueralert) for possible values
    # @param issuer_alert_at [String] The timestamp of when the current issuer alert was received and processed, in
#  RFC 3339 format.
#  This field is present only if there's an active issuer alert.
    # @param hsa_fsa [Boolean] Indicates whether the card is linked to a Health Savings Account (HSA) or
#  Flexible
#  Spending Account (FSA), based on the card BIN.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::Card]
    def initialize(id: OMIT, card_brand: OMIT, last_4: OMIT, exp_month: OMIT, exp_year: OMIT, cardholder_name: OMIT, billing_address: OMIT, fingerprint: OMIT, customer_id: OMIT, merchant_id: OMIT, reference_id: OMIT, enabled: OMIT, card_type: OMIT, prepaid_type: OMIT, bin: OMIT, version: OMIT, card_co_brand: OMIT, issuer_alert: OMIT, issuer_alert_at: OMIT, hsa_fsa: OMIT, additional_properties: nil)
      @id = id if id != OMIT
      @card_brand = card_brand if card_brand != OMIT
      @last_4 = last_4 if last_4 != OMIT
      @exp_month = exp_month if exp_month != OMIT
      @exp_year = exp_year if exp_year != OMIT
      @cardholder_name = cardholder_name if cardholder_name != OMIT
      @billing_address = billing_address if billing_address != OMIT
      @fingerprint = fingerprint if fingerprint != OMIT
      @customer_id = customer_id if customer_id != OMIT
      @merchant_id = merchant_id if merchant_id != OMIT
      @reference_id = reference_id if reference_id != OMIT
      @enabled = enabled if enabled != OMIT
      @card_type = card_type if card_type != OMIT
      @prepaid_type = prepaid_type if prepaid_type != OMIT
      @bin = bin if bin != OMIT
      @version = version if version != OMIT
      @card_co_brand = card_co_brand if card_co_brand != OMIT
      @issuer_alert = issuer_alert if issuer_alert != OMIT
      @issuer_alert_at = issuer_alert_at if issuer_alert_at != OMIT
      @hsa_fsa = hsa_fsa if hsa_fsa != OMIT
      @additional_properties = additional_properties
      @_field_set = { "id": id, "card_brand": card_brand, "last_4": last_4, "exp_month": exp_month, "exp_year": exp_year, "cardholder_name": cardholder_name, "billing_address": billing_address, "fingerprint": fingerprint, "customer_id": customer_id, "merchant_id": merchant_id, "reference_id": reference_id, "enabled": enabled, "card_type": card_type, "prepaid_type": prepaid_type, "bin": bin, "version": version, "card_co_brand": card_co_brand, "issuer_alert": issuer_alert, "issuer_alert_at": issuer_alert_at, "hsa_fsa": hsa_fsa }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Card
    #
    # @param json_object [String] 
    # @return [SquareApiClient::Card]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      card_brand = parsed_json["card_brand"]
      last_4 = parsed_json["last_4"]
      exp_month = parsed_json["exp_month"]
      exp_year = parsed_json["exp_year"]
      cardholder_name = parsed_json["cardholder_name"]
      unless parsed_json["billing_address"].nil?
        billing_address = parsed_json["billing_address"].to_json
        billing_address = SquareApiClient::Address.from_json(json_object: billing_address)
      else
        billing_address = nil
      end
      fingerprint = parsed_json["fingerprint"]
      customer_id = parsed_json["customer_id"]
      merchant_id = parsed_json["merchant_id"]
      reference_id = parsed_json["reference_id"]
      enabled = parsed_json["enabled"]
      card_type = parsed_json["card_type"]
      prepaid_type = parsed_json["prepaid_type"]
      bin = parsed_json["bin"]
      version = parsed_json["version"]
      card_co_brand = parsed_json["card_co_brand"]
      issuer_alert = parsed_json["issuer_alert"]
      issuer_alert_at = parsed_json["issuer_alert_at"]
      hsa_fsa = parsed_json["hsa_fsa"]
      new(
        id: id,
        card_brand: card_brand,
        last_4: last_4,
        exp_month: exp_month,
        exp_year: exp_year,
        cardholder_name: cardholder_name,
        billing_address: billing_address,
        fingerprint: fingerprint,
        customer_id: customer_id,
        merchant_id: merchant_id,
        reference_id: reference_id,
        enabled: enabled,
        card_type: card_type,
        prepaid_type: prepaid_type,
        bin: bin,
        version: version,
        card_co_brand: card_co_brand,
        issuer_alert: issuer_alert,
        issuer_alert_at: issuer_alert_at,
        hsa_fsa: hsa_fsa,
        additional_properties: struct
      )
    end
# Serialize an instance of Card to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id&.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.card_brand&.is_a?(SquareApiClient::CardBrand) != false || raise("Passed value for field obj.card_brand is not the expected type, validation failed.")
      obj.last_4&.is_a?(String) != false || raise("Passed value for field obj.last_4 is not the expected type, validation failed.")
      obj.exp_month&.is_a?(Long) != false || raise("Passed value for field obj.exp_month is not the expected type, validation failed.")
      obj.exp_year&.is_a?(Long) != false || raise("Passed value for field obj.exp_year is not the expected type, validation failed.")
      obj.cardholder_name&.is_a?(String) != false || raise("Passed value for field obj.cardholder_name is not the expected type, validation failed.")
      obj.billing_address.nil? || SquareApiClient::Address.validate_raw(obj: obj.billing_address)
      obj.fingerprint&.is_a?(String) != false || raise("Passed value for field obj.fingerprint is not the expected type, validation failed.")
      obj.customer_id&.is_a?(String) != false || raise("Passed value for field obj.customer_id is not the expected type, validation failed.")
      obj.merchant_id&.is_a?(String) != false || raise("Passed value for field obj.merchant_id is not the expected type, validation failed.")
      obj.reference_id&.is_a?(String) != false || raise("Passed value for field obj.reference_id is not the expected type, validation failed.")
      obj.enabled&.is_a?(Boolean) != false || raise("Passed value for field obj.enabled is not the expected type, validation failed.")
      obj.card_type&.is_a?(SquareApiClient::CardType) != false || raise("Passed value for field obj.card_type is not the expected type, validation failed.")
      obj.prepaid_type&.is_a?(SquareApiClient::CardPrepaidType) != false || raise("Passed value for field obj.prepaid_type is not the expected type, validation failed.")
      obj.bin&.is_a?(String) != false || raise("Passed value for field obj.bin is not the expected type, validation failed.")
      obj.version&.is_a?(Long) != false || raise("Passed value for field obj.version is not the expected type, validation failed.")
      obj.card_co_brand&.is_a?(SquareApiClient::CardCoBrand) != false || raise("Passed value for field obj.card_co_brand is not the expected type, validation failed.")
      obj.issuer_alert&.is_a?(String) != false || raise("Passed value for field obj.issuer_alert is not the expected type, validation failed.")
      obj.issuer_alert_at&.is_a?(String) != false || raise("Passed value for field obj.issuer_alert_at is not the expected type, validation failed.")
      obj.hsa_fsa&.is_a?(Boolean) != false || raise("Passed value for field obj.hsa_fsa is not the expected type, validation failed.")
    end
  end
end