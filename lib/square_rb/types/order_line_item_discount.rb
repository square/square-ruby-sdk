# frozen_string_literal: true
require_relative "order_line_item_discount_type"
require_relative "money"
require_relative "order_line_item_discount_scope"
require "ostruct"
require "json"

module SquareApiClient
# Represents a discount that applies to one or more line items in an
#  order.
#  Fixed-amount, order-scoped discounts are distributed across all non-zero line
#  item totals.
#  The amount distributed to each line item is relative to the
#  amount contributed by the item to the order subtotal.
  class OrderLineItemDiscount
  # @return [String] A unique ID that identifies the discount only within this order.
    attr_reader :uid
  # @return [String] The catalog object ID referencing [CatalogDiscount](entity:CatalogDiscount).
    attr_reader :catalog_object_id
  # @return [Long] The version of the catalog object that this discount references.
    attr_reader :catalog_version
  # @return [String] The discount's name.
    attr_reader :name
  # @return [SquareApiClient::OrderLineItemDiscountType] The type of the discount.
#  Discounts that do not reference a catalog object ID must have a type of
#  `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
#  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible
#  values
    attr_reader :type
  # @return [String] The percentage of the discount, as a string representation of a decimal number.
#  A value of `7.25` corresponds to a percentage of 7.25%.
#  `percentage` is not set for amount-based discounts.
    attr_reader :percentage
  # @return [SquareApiClient::Money] The total declared monetary amount of the discount.
#  `amount_money` is not set for percentage-based discounts.
    attr_reader :amount_money
  # @return [SquareApiClient::Money] The amount of discount actually applied to the line item.
#  The amount represents the amount of money applied as a line-item scoped
#  discount.
#  When an amount-based discount is scoped to the entire order, the value
#  of `applied_money` is different than `amount_money` because the total
#  amount of the discount is distributed across all line items.
    attr_reader :applied_money
  # @return [Hash{String => String}] Application-defined data attached to this discount. Metadata fields are intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    attr_reader :metadata
  # @return [SquareApiClient::OrderLineItemDiscountScope] Indicates the level at which the discount applies. For `ORDER` scoped discounts,
#  Square generates references in `applied_discounts` on all order line items that
#  do
#  not have them. For `LINE_ITEM` scoped discounts, the discount only applies to
#  line items
#  with a discount reference in their `applied_discounts` field.
#  This field is immutable. To change the scope of a discount, you must delete
#  the discount and re-add it as a new discount.
#  See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible
#  values
    attr_reader :scope
  # @return [Array<String>] The reward IDs corresponding to this discount. The application and
#  specification of discounts that have `reward_ids` are completely controlled by
#  the backing
#  criteria corresponding to the reward tiers of the rewards that are added to the
#  order
#  through the Loyalty API. To manually unapply discounts that are the result of
#  added rewards,
#  the rewards must be removed from the order through the Loyalty API.
    attr_reader :reward_ids
  # @return [String] The object ID of a [pricing rule](entity:CatalogPricingRule) to be applied
#  automatically to this discount. The specification and application of the
#  discounts, to
#  which a `pricing_rule_id` is assigned, are completely controlled by the
#  corresponding
#  pricing rule.
    attr_reader :pricing_rule_id
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param uid [String] A unique ID that identifies the discount only within this order.
    # @param catalog_object_id [String] The catalog object ID referencing [CatalogDiscount](entity:CatalogDiscount).
    # @param catalog_version [Long] The version of the catalog object that this discount references.
    # @param name [String] The discount's name.
    # @param type [SquareApiClient::OrderLineItemDiscountType] The type of the discount.
#  Discounts that do not reference a catalog object ID must have a type of
#  `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
#  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible
#  values
    # @param percentage [String] The percentage of the discount, as a string representation of a decimal number.
#  A value of `7.25` corresponds to a percentage of 7.25%.
#  `percentage` is not set for amount-based discounts.
    # @param amount_money [SquareApiClient::Money] The total declared monetary amount of the discount.
#  `amount_money` is not set for percentage-based discounts.
    # @param applied_money [SquareApiClient::Money] The amount of discount actually applied to the line item.
#  The amount represents the amount of money applied as a line-item scoped
#  discount.
#  When an amount-based discount is scoped to the entire order, the value
#  of `applied_money` is different than `amount_money` because the total
#  amount of the discount is distributed across all line items.
    # @param metadata [Hash{String => String}] Application-defined data attached to this discount. Metadata fields are intended
#  to store descriptive references or associations with an entity in another system
#  or store brief
#  information about the object. Square does not process this field; it only stores
#  and returns it
#  in relevant API calls. Do not use metadata to store any sensitive information
#  (such as personally
#  identifiable information or card details).
#  Keys written by applications must be 60 characters or less and must be in the
#  character set
#  `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These
#  keys are prefixed
#  with a namespace, separated from the key with a ':' character.
#  Values have a maximum length of 255 characters.
#  An application can have up to 10 entries per metadata field.
#  Entries written by applications are private and can only be read or modified by
#  the same
#  application.
#  For more information, see
#  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    # @param scope [SquareApiClient::OrderLineItemDiscountScope] Indicates the level at which the discount applies. For `ORDER` scoped discounts,
#  Square generates references in `applied_discounts` on all order line items that
#  do
#  not have them. For `LINE_ITEM` scoped discounts, the discount only applies to
#  line items
#  with a discount reference in their `applied_discounts` field.
#  This field is immutable. To change the scope of a discount, you must delete
#  the discount and re-add it as a new discount.
#  See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible
#  values
    # @param reward_ids [Array<String>] The reward IDs corresponding to this discount. The application and
#  specification of discounts that have `reward_ids` are completely controlled by
#  the backing
#  criteria corresponding to the reward tiers of the rewards that are added to the
#  order
#  through the Loyalty API. To manually unapply discounts that are the result of
#  added rewards,
#  the rewards must be removed from the order through the Loyalty API.
    # @param pricing_rule_id [String] The object ID of a [pricing rule](entity:CatalogPricingRule) to be applied
#  automatically to this discount. The specification and application of the
#  discounts, to
#  which a `pricing_rule_id` is assigned, are completely controlled by the
#  corresponding
#  pricing rule.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [SquareApiClient::OrderLineItemDiscount]
    def initialize(uid: OMIT, catalog_object_id: OMIT, catalog_version: OMIT, name: OMIT, type: OMIT, percentage: OMIT, amount_money: OMIT, applied_money: OMIT, metadata: OMIT, scope: OMIT, reward_ids: OMIT, pricing_rule_id: OMIT, additional_properties: nil)
      @uid = uid if uid != OMIT
      @catalog_object_id = catalog_object_id if catalog_object_id != OMIT
      @catalog_version = catalog_version if catalog_version != OMIT
      @name = name if name != OMIT
      @type = type if type != OMIT
      @percentage = percentage if percentage != OMIT
      @amount_money = amount_money if amount_money != OMIT
      @applied_money = applied_money if applied_money != OMIT
      @metadata = metadata if metadata != OMIT
      @scope = scope if scope != OMIT
      @reward_ids = reward_ids if reward_ids != OMIT
      @pricing_rule_id = pricing_rule_id if pricing_rule_id != OMIT
      @additional_properties = additional_properties
      @_field_set = { "uid": uid, "catalog_object_id": catalog_object_id, "catalog_version": catalog_version, "name": name, "type": type, "percentage": percentage, "amount_money": amount_money, "applied_money": applied_money, "metadata": metadata, "scope": scope, "reward_ids": reward_ids, "pricing_rule_id": pricing_rule_id }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of OrderLineItemDiscount
    #
    # @param json_object [String] 
    # @return [SquareApiClient::OrderLineItemDiscount]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      uid = parsed_json["uid"]
      catalog_object_id = parsed_json["catalog_object_id"]
      catalog_version = parsed_json["catalog_version"]
      name = parsed_json["name"]
      type = parsed_json["type"]
      percentage = parsed_json["percentage"]
      unless parsed_json["amount_money"].nil?
        amount_money = parsed_json["amount_money"].to_json
        amount_money = SquareApiClient::Money.from_json(json_object: amount_money)
      else
        amount_money = nil
      end
      unless parsed_json["applied_money"].nil?
        applied_money = parsed_json["applied_money"].to_json
        applied_money = SquareApiClient::Money.from_json(json_object: applied_money)
      else
        applied_money = nil
      end
      metadata = parsed_json["metadata"]
      scope = parsed_json["scope"]
      reward_ids = parsed_json["reward_ids"]
      pricing_rule_id = parsed_json["pricing_rule_id"]
      new(
        uid: uid,
        catalog_object_id: catalog_object_id,
        catalog_version: catalog_version,
        name: name,
        type: type,
        percentage: percentage,
        amount_money: amount_money,
        applied_money: applied_money,
        metadata: metadata,
        scope: scope,
        reward_ids: reward_ids,
        pricing_rule_id: pricing_rule_id,
        additional_properties: struct
      )
    end
# Serialize an instance of OrderLineItemDiscount to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.uid&.is_a?(String) != false || raise("Passed value for field obj.uid is not the expected type, validation failed.")
      obj.catalog_object_id&.is_a?(String) != false || raise("Passed value for field obj.catalog_object_id is not the expected type, validation failed.")
      obj.catalog_version&.is_a?(Long) != false || raise("Passed value for field obj.catalog_version is not the expected type, validation failed.")
      obj.name&.is_a?(String) != false || raise("Passed value for field obj.name is not the expected type, validation failed.")
      obj.type&.is_a?(SquareApiClient::OrderLineItemDiscountType) != false || raise("Passed value for field obj.type is not the expected type, validation failed.")
      obj.percentage&.is_a?(String) != false || raise("Passed value for field obj.percentage is not the expected type, validation failed.")
      obj.amount_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.amount_money)
      obj.applied_money.nil? || SquareApiClient::Money.validate_raw(obj: obj.applied_money)
      obj.metadata&.is_a?(Hash) != false || raise("Passed value for field obj.metadata is not the expected type, validation failed.")
      obj.scope&.is_a?(SquareApiClient::OrderLineItemDiscountScope) != false || raise("Passed value for field obj.scope is not the expected type, validation failed.")
      obj.reward_ids&.is_a?(Array) != false || raise("Passed value for field obj.reward_ids is not the expected type, validation failed.")
      obj.pricing_rule_id&.is_a?(String) != false || raise("Passed value for field obj.pricing_rule_id is not the expected type, validation failed.")
    end
  end
end